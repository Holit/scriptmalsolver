[=] 	Initiate stack address at 0xfffdd000 
[=] 	Loading D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe to 0x400000
[=] 	PE entry point at 0x401691
[=] 	TEB is at 0x6000
[=] 	PEB is at 0x61b0
[=] 	LDR is at 0x6630
[=] 	Loading ntdll.dll ...
[=] 	Done loading ntdll.dll
[=] 	Loading kernel32.dll ...
[=] 	Loading kernelbase.dll ...
[=] 	Done loading kernelbase.dll
[=] 	Done loading kernel32.dll
[=] 	Loading mscoree.dll ...
[=] 	Calling mscoree.dll DllMain at 0x1024f100
[=] 	GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)
[=] 	GetCurrentProcessId() = 0x7cc
[=] 	GetCurrentThreadId() = 0x2
[=] 	GetTickCount() = 0x30d40
[=] 	QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0
[=] 	HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x50006d0
[=] 	GetModuleHandleW(lpModuleName = "KERNELBASE.DLL") = 0x10000000
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsAlloc") = 0x10129d30
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsGetValue") = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsSetValue") = 0x1011c300
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsFree") = 0x1012cdc0
[=] 	TlsAlloc() = 0x0
[=] 	TlsSetValue(dwTlsIndex = 0, lpTlsValue = 0x10113c90) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10252da0) = 0x10252da0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10251f50) = 0x10251f50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10113c90) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1012cdc0) = 0x1012cdc0
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d80, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d98, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268db0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268dc8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268de0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268df8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e10, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e28, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e40, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e58, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e70, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e88, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268ea0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268eb8, dwSpinCount = 0xfa0) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	FlsAlloc(lpCallback = 0x102519d0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x214) = 0x50016d0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x0
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	FlsSetValue(dwFlsIndex = 0, lpFlsData = 0x50016d0) = 0x1
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	GetCommandLineA() = 0x50018e4
[=] 	GetEnvironmentStringsW() = 0x5001909
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x1) = 0x500190b
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	FreeEnvironmentStringsW(penv = 0x5001909) = 0x1
[=] 	GetStartupInfoW(lpStartupInfo = 0xffffce30) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x480) = 0x5001928
[=] 	GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6
[=] 	GetFileType(hFile = 0xfffffff6) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001934, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5
[=] 	GetFileType(hFile = 0xfffffff5) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001958, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4
[=] 	GetFileType(hFile = 0xfffffff4) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x500197c, dwSpinCount = 0xfa0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetACP() = 0x1b5
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x220) = 0x5001da8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	IsValidCodePage(CodePage = 0x1b5) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcdf8) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc8bc) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc638, cchWideChar = 0x100) = 0x100
[=] 	GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc638, cchSrc = 0x100, lpCharType = 0xffffc8d0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3b8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcbd0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5e8, cchWideChar = 0x100) = 0x100
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3d8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcad0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetModuleFileNameA(hModule = 0, lpFilename = 0x10268938, nSize = 0x104) = 0x11
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x2b) = 0x5001fc8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x4) = 0x5001ff3
[=] 	HeapFree(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x500190b) = True
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eea0) = 0x1025eea0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef50) = 0x1025ef50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efc0) = 0x1025efc0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025f060) = 0x1025f060
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e560) = 0x1025e560
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef70) = 0x1025ef70
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eec0) = 0x1025eec0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efe0) = 0x1025efe0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x80) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x800) = 0x5002077
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapSize(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x5001ff7) = 0x80
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x10263a20) = 0x10263a20
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ffb) = 0x5001ffb
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	GetLastError() = 0x0
[=] 	GetProcessHeap() = 0x5000000
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x14) = 0x5002877
[=] 	CreateMutexW(lpMutexAttributes = 0, bInitialOwner = 0, lpName = 0) = 0x0
[=] 	GetSystemInfo(lpSystemInfo = 0xffffcf74) = 0x0
[!] 	api GlobalMemoryStatus (kernel32) is not implemented
[=] 	memset(dest = 0xffffceb8, c = 0, count = 0x40) = 0xffffceb8
[!] 	api GlobalMemoryStatusEx (kernelbase) is not implemented
[=] 	ZwQuerySystemInformation(SystemInformationClass = 0xb6, SystemInformation = 0xffffce54, SystemInformationLength = 0x38, ReturnLength = 0) = 0x0
[=] 	QueryInformationProcess: no implementation for info class 0x01
[=] 	ZwQueryInformationProcess(ProcessHandle = 0xffffffff, ProcessInformationClass = 0x1, ProcessInformation = 0xffffce04, ProcessInformationLength = 0x20, ReturnLength = 0) = 0xc0000001
[!] 	api RtlNtStatusToDosError (ntdll) is not implemented
[!] 	api RtlSetLastWin32Error (ntdll) is not implemented
[!] 	api RtlImageNtHeader (ntdll) is not implemented
[!] 	api RtlImageNtHeaderEx (ntdll) is not implemented
[=] 	GetACP() = 0x1b5
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf40) = 0x1
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0xcc) = 0x500288b
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1a) = 0x5002957
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x18) = 0x5002971
[=] 	InitializeCriticalSection(lpCriticalSection = 0x5002971) = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x1026900c) = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x10268ff0) = 0x1
[=] 	Returned from mscoree.dll DllMain
[=] 	Done loading mscoree.dll
[=] 	Loading ucrtbase.dll ...
[Calling ucrtbase.dll DllMain at 0x102aba30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd0)][GetCurrentThreadId() = 0x2][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfc8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10390ec8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x102e1070) = 0x1][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x1, lpFlsData = 0x10390ea0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0) = 0x2][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a18, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a30, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a48, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a60, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a78, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a90, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391aa8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ac0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ad8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][FlsAlloc(lpCallback = 0x102c2cd0) = 0x3][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x3) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0xffffffff) = 0x1][_calloc_base(num = 0x2, size = 0x364) = 0x5002a81][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0x5002a81) = 0x1][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][_free_base(address = 0)][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][_calloc_base(num = 0x40, size = 0x38) = 0x5003149][InitializeCriticalSectionEx(lpCriticalSection = 0x5003149, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003181, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003229, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003261, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003299, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50032d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003309, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003341, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003379, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033b1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033e9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003421, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003459, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003491, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50034c9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003501, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003539, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003571, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035a9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035e1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003619, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003651, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003689, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036c1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036f9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003731, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003769, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037a1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037d9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003811, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003849, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003881, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003929, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003961, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003999, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50039d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a09, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a41, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a79, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ab1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ae9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b21, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b59, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b91, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003bc9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c01, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c39, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c71, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ca9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ce1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d19, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d51, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d89, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003dc1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003df9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e31, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e69, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ea1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ed9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003f11, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_free_base(address = 0)][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf40) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetCommandLineA() = 0x5003f65][GetCommandLineW() = 0x5003f8a][FlsGetValue(dwFlsIndex = 0x3) = 0x5002a81][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x5003fd2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x5003fea, c = 0, count = 0x101) = 0x5003fea][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x5003fea, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x50040eb, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x50041f2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x500420a, c = 0, count = 0x101) = 0x500420a][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x500420a, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x500430b, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5004412][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_malloc_base(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_free_base(address = 0)][FreeEnvironmentStringsW(penv = 0x5004412) = 0x1][_calloc_base(num = 0x1, size = 0x4) = 0x5004414][_free_base(address = 0)][_free_base(address = 0)][_free_base(address = 0x500190b)][api _initialize_onexit_table (ucrtbase) is not implemented][api _initialize_onexit_table (ucrtbase) is not implemented][QueryPerformanceFrequency(lpFrequency = 0xffffcfa4) = 0x1][QueryPerformanceCounter(lpPerformanceCount = 0xffffcf9c) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][_calloc_base(num = 0x200, size = 0x4) = 0x5004418][_free_base(address = 0)][InitializeCriticalSectionEx(lpCriticalSection = 0x10390310, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390348, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390380, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_initterm(pfbegin = 0x10283918, pfend = 0x1028391c) = 0x0][Returned from ucrtbase.dll DllMain][Done loading ucrtbase.dll][Loading advapi32.dll ...][Loading msvcrt.dll ...][Calling msvcrt.dll DllMain at 0x103d5ac0][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x2][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe0) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x5004e6c][EncodePointer(Ptr = 0) = 0x0][api _CrtSetDbgBlockType (msvcrt) is not implemented][EncodePointer(Ptr = 0x103da620) = 0x103da620][InitializeCriticalSectionEx(lpCriticalSection = 0x104541cc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454204, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045423c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454274, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542ac, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542e4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045431c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454354, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045438c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543c4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543fc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454434, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045446c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104544a4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][FlsAlloc(lpCallback = 0x10406700) = 0x4][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x214) = 0x5005e6c][FlsSetValue(dwFlsIndex = 0x4, lpFlsData = 0x5005e6c) = 0x1][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][GetStartupInfoW(lpStartupInfo = 0xffffcf98) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x480) = 0x500609c][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060a8, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060cc, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060f0, dwSpinCount = 0xfa0) = 0x1][GetEnvironmentStringsW() = 0x500651c][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][malloc(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x500651c) = 0x1][GetCommandLineA() = 0x500651e][GetCommandLineW() = 0x5006543][api _setmbcp (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetACP() = 0x1b5][malloc(size = 0x220) = 0x500658b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf84) = 0x1][memset(dest = 0x50065a7, c = 0, count = 0x101) = 0x50065a7][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffca48) = 0x1][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf14, c = 0x20, count = 0x17) = 0xffffcf14][memset(dest = 0xffffcf5b, c = 0x20, count = 0x1) = 0xffffcf5b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc7c8, c = 0, count = 0x200) = 0xffffc7c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc7c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc7c8, cchSrc = 0x100, lpCharType = 0xffffca5c) = 0x1][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc758, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc538, cchWideChar = 0x106, lpMultiByteStr = 0xffffcd5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc778, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc558, cchWideChar = 0x106, lpMultiByteStr = 0xffffcc5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x4) = 0x50067ab][free(address = 0x500190b)][_initterm_e(pfbegin = 0x103a1ed4, pfend = 0x103a1ee8) = 0x0][_initterm(pfbegin = 0x103a1ec8, pfend = 0x103a1ed0) = 0x0][Returned from msvcrt.dll DllMain][Done loading msvcrt.dll][Failed to resolve api-ms-win-eventing-controller-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-1.dll][Loading sechost.dll ...][Loading rpcrt4.dll ...][Calling rpcrt4.dll DllMain at 0x4efbbf30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfc8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x2][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02dafc, dwSpinCount = 0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02db24, dwSpinCount = 0, Flags = 0) = 0x1][api RtlInitializeCriticalSectionAndSpinCount (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeCriticalSection(lpCriticalSection = 0x4f02da04) = 0x1][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][Returned from rpcrt4.dll DllMain][Done loading rpcrt4.dll][Calling sechost.dll DllMain at 0x10480d20][_initterm_e(pfbegin = 0x10461c3c, pfend = 0x10461c40) = 0x0][_initterm(pfbegin = 0x10461c20, pfend = 0x10461c38) = 0x0][DisableThreadLibraryCalls(hLibModule = 0x10460000) = 0x1][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeSRWLock(SRWLock = 0x104caaac)][api EventRegister (kernelbase) is not implemented][Error encountered while running sechost.dll DllMain, bailing][Done loading sechost.dll][Failed to resolve api-ms-win-service-core-l1-1-0.dll][Failed to resolve api-ms-win-service-core-l1-1-1.dll][Failed to resolve api-ms-win-service-core-l1-1-2.dll][Failed to resolve api-ms-win-service-management-l1-1-0.dll][Failed to resolve api-ms-win-service-management-l2-1-0.dll][Failed to resolve api-ms-win-service-private-l1-1-4.dll][Failed to resolve api-ms-win-service-private-l1-1-2.dll][Failed to resolve api-ms-win-service-private-l1-1-3.dll][Failed to resolve api-ms-win-service-private-l1-1-0.dll][Failed to resolve api-ms-win-service-winsvc-l1-1-0.dll][Failed to resolve api-ms-win-security-audit-l1-1-1.dll][Failed to resolve api-ms-win-security-audit-l1-1-0.dll][Done loading advapi32.dll][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcff0)][GetCurrentThreadId() = 0x2][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x446d9c, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x40312a) = 0x5][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x5, lpFlsData = 0x446d74) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x447af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b68, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b80, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b98, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bb0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bc8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447be0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bf8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c10, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c28, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x422fb5) = 0x6][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x6) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0xffffffff) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x364) = 0x5006993][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0x5006993) = 0x1][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b50) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b50) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0xe00) = 0x5006cf7][InitializeCriticalSectionEx(lpCriticalSection = 0x5006cf7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d2f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d67, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d9f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006dd7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e0f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e47, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e7f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eb7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f27, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f5f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f97, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006fcf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007007, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500703f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007077, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500711f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007157, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500718f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007237, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500726f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007317, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500734f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007387, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073bf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073f7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500742f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007467, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500749f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50074d7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500750f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007547, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500757f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075b7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075ef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007627, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500765f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007697, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50076cf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007707, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500773f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007777, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500781f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007857, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500788f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007937, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500796f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a17, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a4f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a87, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007abf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf28) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetCommandLineA() = 0x5007b13][GetCommandLineW() = 0x5007b38][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][GetACP() = 0x1b5][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x220) = 0x5007b80][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcd20) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc5e4) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc378, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc378, cchSrc = 0x100, lpCharType = 0xffffc5f8) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc338, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc128, cchWideChar = 0x104, lpMultiByteStr = 0xffffcaf8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc348, cchWideChar = 0x100) = 0x100][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc138, cchWideChar = 0x102, lpMultiByteStr = 0xffffc9f8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b20) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x80) = 0x5007da0][LeaveCriticalSection(lpCriticalSection = 0x447b20) = 0x0][GetModuleFileNameW(hModule = 0, lpFilename = 0xffffcd70, nSize = 0x105) = 0x11][GetProcAddress(hModule = 0x6b800000, lpProcName = "AreFileApisANSI") = 0x6b821d80][AreFileApisANSI() = 0x1][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0x447458, cbMultiByte = 0x104, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x2b) = 0x5007e20][InitializeSListHead(ListHead = 0x446d50) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5007e4b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x5007e4b) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x4) = 0x5007e4d][HeapFree(hHeap = 0x5000000, dwFlags = 0, lpMem = 0x500190b) = True][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x800) = 0x5007e51][InitializeCriticalSectionEx(lpCriticalSection = 0x4460a0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4460d8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x446110, dwSpinCount = 0xfa0, Flags = 0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][SetUnhandledExceptionFilter(lpTopLevelExceptionFilter = 0x4021bb) = 0x0][GetCurrentProcess() = 0x7cc][OpenProcessToken(ProcessHandle = 0x7cc, DesiredAccess = 0x28, TokenHandle = 0xffffcfa0) = 0x1][api LookupPrivilegeValueW (advapi32) is not implemented][LocalAlloc(uFlags = 0x40, uBytes = 0x1c) = 0x500865d][api NdrClientCall4 (rpcrt4) is not implemented][api NdrClientCall2 (rpcrt4) is not implemented][memset(dest = 0xffffc860, c = 0, count = 0xdc) = 0xffffc860][memset(dest = 0xffffc96c, c = 0, count = 0x94) = 0xffffc96c][api RpcBindingCreateW (rpcrt4) is not implemented][api RtlEnterCriticalSection (ntdll) is not implemented][LoadLibraryExW(lpLibFileName = "rpcrt4.dll", hFile = 0, dwFlags = 0) = 0x4ef80000][ZwQuerySystemInformation(SystemInformationClass = 0, SystemInformation = 0xffffc6e0, SystemInformationLength = 0x2c, ReturnLength = 0) = 0x0][api RtlGetNtProductType (ntdll) is not implemented][api RtlGetCurrentServiceSessionId (ntdll) is not implemented][ZwOpenKey(KeyHandle = 0xffffc694, DesiredAccess = 0x1, ObjectAttributes = 0xffffc64c) = 0x0][api ZwQueryValueKey (ntdll) is not implemented][CPU Context:][ah	: 0x0][al	: 0x17][ch	: 0x0][cl	: 0x0][dh	: 0x88][dl	: 0x10][bh	: 0x0][bl	: 0x1][ax	: 0x17][cx	: 0x0][dx	: 0x8810][bx	: 0x1][sp	: 0xc618][bp	: 0xc6c0][si	: 0x0][di	: 0xc6dc][ip	: 0x0][eax	: 0x17][ecx	: 0x0][edx	: 0x4b308810][ebx	: 0x1][esp	: 0xffffc618][ebp	: 0xffffc6c0][esi	: 0x0][edi	: 0xffffc6dc][eip	: 0x0][cr0	: 0x11][cr1	: 0x0][cr2	: 0x0][cr3	: 0x0][cr4	: 0x0][cr8	: 0x0][dr0	: 0x0][dr1	: 0x0][dr2	: 0x0][dr3	: 0x0][dr4	: 0x0][dr5	: 0x0][dr6	: 0xffff0ff0][dr7	: 0x400][st0	: 0x0][st1	: 0x0][st2	: 0x0][st3	: 0x0][st4	: 0x0][st5	: 0x0][st6	: 0x0][st7	: 0x0][eflags	: 0x46][cs	: 0x1b][ss	: 0x28][ds	: 0x28][es	: 0x28][fs	: 0x73][gs	: 0x7b][PC = 0x00000000 (unreachable)
][Memory map:][Start        End          Perm    Label                 Image][0000006000 - 000000c000   rwx     [FS]                  ][0000030000 - 0000031000   rwx     [GDT]                 ][0000400000 - 0000449000   rwx     inject.exe            D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0005000000 - 0005001000   rwx     [heap]                ][0005001000 - 0005002000   rwx     [heap]                ][0005002000 - 0005003000   rwx     [heap]                ][0005003000 - 0005004000   rwx     [heap]                ][0005004000 - 0005005000   rwx     [heap]                ][0005005000 - 0005006000   rwx     [heap]                ][0005006000 - 0005007000   rwx     [heap]                ][0005007000 - 0005008000   rwx     [heap]                ][0005008000 - 0005009000   rwx     [heap]                ][0006000000 - 0007400000   rwx     [GS]                  ][0010000000 - 0010218000   rwx     kernelbase.dll        D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\KERNELBASE.dll][0010220000 - 0010272000   rwx     mscoree.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\mscoree.dll][0010280000 - 00103a0000   rwx     ucrtbase.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ucrtbase.dll][00103a0000 - 001045f000   rwx     msvcrt.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\msvcrt.dll][0010460000 - 00104d6000   rwx     sechost.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\SECHOST.dll][004b280000 - 004b423000   rwx     ntdll.dll             D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ntdll.dll][004c300000 - 004c37b000   rwx     advapi32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ADVAPI32.dll][004ef80000 - 004f03e000   rwx     rpcrt4.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\RPCRT4.dll][006b800000 - 006b8f0000   rwx     kernel32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\kernel32.dll][007ffe0000 - 007ffe1000   rwx     [kuser shared data]   ][00fffdd000 - 00ffffe000   rwx     [stack]               ][=] 	Initiate stack address at 0xfffdd000 
[=] 	Loading D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe to 0x400000
[=] 	PE entry point at 0x401691
[=] 	TEB is at 0x6000
[=] 	PEB is at 0x61b0
[=] 	LDR is at 0x6630
[=] 	Loading ntdll.dll ...
[=] 	Done loading ntdll.dll
[=] 	Loading kernel32.dll ...
[=] 	Loading kernelbase.dll ...
[=] 	Done loading kernelbase.dll
[=] 	Done loading kernel32.dll
[=] 	Loading mscoree.dll ...
[=] 	Calling mscoree.dll DllMain at 0x1024f100
[=] 	GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)
[=] 	GetCurrentProcessId() = 0x7cc
[=] 	GetCurrentThreadId() = 0x0
[=] 	GetTickCount() = 0x30d40
[=] 	QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0
[=] 	GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[=] 	HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x50006d0
[=] 	GetModuleHandleW(lpModuleName = "KERNELBASE.DLL") = 0x10000000
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsAlloc") = 0x10129d30
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsGetValue") = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsSetValue") = 0x1011c300
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsFree") = 0x1012cdc0
[=] 	TlsAlloc() = 0x0
[=] 	TlsSetValue(dwTlsIndex = 0, lpTlsValue = 0x10113c90) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10252da0) = 0x10252da0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10251f50) = 0x10251f50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10113c90) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1012cdc0) = 0x1012cdc0
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d80, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d98, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268db0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268dc8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268de0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268df8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e10, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e28, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e40, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e58, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e70, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e88, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268ea0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268eb8, dwSpinCount = 0xfa0) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	FlsAlloc(lpCallback = 0x102519d0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x214) = 0x50016d0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x0
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	FlsSetValue(dwFlsIndex = 0, lpFlsData = 0x50016d0) = 0x1
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	GetCommandLineA() = 0x50018e4
[=] 	GetEnvironmentStringsW() = 0x5001909
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x1) = 0x500190b
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	FreeEnvironmentStringsW(penv = 0x5001909) = 0x1
[=] 	GetStartupInfoW(lpStartupInfo = 0xffffce30) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x480) = 0x5001928
[=] 	GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6
[=] 	GetFileType(hFile = 0xfffffff6) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001934, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5
[=] 	GetFileType(hFile = 0xfffffff5) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001958, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4
[=] 	GetFileType(hFile = 0xfffffff4) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x500197c, dwSpinCount = 0xfa0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetACP() = 0x1b5
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x220) = 0x5001da8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	IsValidCodePage(CodePage = 0x1b5) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcdf8) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc8bc) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc638, cchWideChar = 0x100) = 0x100
[=] 	GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc638, cchSrc = 0x100, lpCharType = 0xffffc8d0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3b8, cchDest = 0x102) = 0x102
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3b8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcbd0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5e8, cchWideChar = 0x100) = 0x100
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3d8, cchDest = 0x102) = 0x102
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3d8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcad0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetModuleFileNameA(hModule = 0, lpFilename = 0x10268938, nSize = 0x104) = 0x11
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x2b) = 0x5001fc8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x4) = 0x5001ff3
[=] 	HeapFree(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x500190b) = True
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eea0) = 0x1025eea0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef50) = 0x1025ef50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efc0) = 0x1025efc0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025f060) = 0x1025f060
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e560) = 0x1025e560
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef70) = 0x1025ef70
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eec0) = 0x1025eec0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efe0) = 0x1025efe0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x80) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x800) = 0x5002077
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapSize(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x5001ff7) = 0x80
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x10263a20) = 0x10263a20
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ffb) = 0x5001ffb
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	GetLastError() = 0x0
[=] 	GetProcessHeap() = 0x5000000
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x14) = 0x5002877
[=] 	CreateMutexW(lpMutexAttributes = 0, bInitialOwner = 0, lpName = 0) = 0x0
[=] 	GetSystemInfo(lpSystemInfo = 0xffffcf74) = 0x0
[!] 	api GlobalMemoryStatus (kernel32) is not implemented
[=] 	memset(dest = 0xffffceb8, c = 0, count = 0x40) = 0xffffceb8
[!] 	api GlobalMemoryStatusEx (kernelbase) is not implemented
[=] 	ZwQuerySystemInformation(SystemInformationClass = 0xb6, SystemInformation = 0xffffce54, SystemInformationLength = 0x38, ReturnLength = 0) = 0x0
[=] 	QueryInformationProcess: no implementation for info class 0x01
[=] 	ZwQueryInformationProcess(ProcessHandle = 0xffffffff, ProcessInformationClass = 0x1, ProcessInformation = 0xffffce04, ProcessInformationLength = 0x20, ReturnLength = 0) = 0xc0000001
[!] 	api RtlNtStatusToDosError (ntdll) is not implemented
[!] 	api RtlSetLastWin32Error (ntdll) is not implemented
[!] 	api RtlImageNtHeader (ntdll) is not implemented
[!] 	api RtlImageNtHeaderEx (ntdll) is not implemented
[=] 	GetACP() = 0x1b5
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf40) = 0x1
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0xcc) = 0x500288b
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1a) = 0x5002957
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x18) = 0x5002971
[=] 	InitializeCriticalSection(lpCriticalSection = 0x5002971) = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x1026900c) = 0x1
[=] 	GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x10268ff0) = 0x1
[=] 	Returned from mscoree.dll DllMain
[=] 	Done loading mscoree.dll
[=] 	Loading ucrtbase.dll ...
[Calling ucrtbase.dll DllMain at 0x102aba30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd0)][GetCurrentThreadId() = 0x0][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfc8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10390ec8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x102e1070) = 0x1][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x1, lpFlsData = 0x10390ea0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0) = 0x2][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a18, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a30, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a48, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a60, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a78, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a90, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391aa8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ac0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ad8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][FlsAlloc(lpCallback = 0x102c2cd0) = 0x3][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x3) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0xffffffff) = 0x1][_calloc_base(num = 0x2, size = 0x364) = 0x5002a81][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0x5002a81) = 0x1][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][_free_base(address = 0)][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][_calloc_base(num = 0x40, size = 0x38) = 0x5003149][InitializeCriticalSectionEx(lpCriticalSection = 0x5003149, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003181, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003229, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003261, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003299, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50032d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003309, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003341, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003379, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033b1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033e9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003421, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003459, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003491, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50034c9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003501, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003539, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003571, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035a9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035e1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003619, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003651, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003689, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036c1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036f9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003731, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003769, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037a1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037d9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003811, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003849, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003881, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003929, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003961, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003999, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50039d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a09, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a41, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a79, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ab1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ae9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b21, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b59, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b91, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003bc9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c01, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c39, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c71, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ca9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ce1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d19, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d51, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d89, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003dc1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003df9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e31, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e69, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ea1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ed9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003f11, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_free_base(address = 0)][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf40) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetCommandLineA() = 0x5003f65][GetCommandLineW() = 0x5003f8a][FlsGetValue(dwFlsIndex = 0x3) = 0x5002a81][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x5003fd2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x5003fea, c = 0, count = 0x101) = 0x5003fea][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x5003fea, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x50040eb, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x50041f2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x500420a, c = 0, count = 0x101) = 0x500420a][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x500420a, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x500430b, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5004412][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_malloc_base(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_free_base(address = 0)][FreeEnvironmentStringsW(penv = 0x5004412) = 0x1][_calloc_base(num = 0x1, size = 0x4) = 0x5004414][_free_base(address = 0)][_free_base(address = 0)][_free_base(address = 0x500190b)][api _initialize_onexit_table (ucrtbase) is not implemented][api _initialize_onexit_table (ucrtbase) is not implemented][QueryPerformanceFrequency(lpFrequency = 0xffffcfa4) = 0x1][QueryPerformanceCounter(lpPerformanceCount = 0xffffcf9c) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][_calloc_base(num = 0x200, size = 0x4) = 0x5004418][_free_base(address = 0)][InitializeCriticalSectionEx(lpCriticalSection = 0x10390310, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390348, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390380, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_initterm(pfbegin = 0x10283918, pfend = 0x1028391c) = 0x0][Returned from ucrtbase.dll DllMain][Done loading ucrtbase.dll][Loading advapi32.dll ...][Loading msvcrt.dll ...][Calling msvcrt.dll DllMain at 0x103d5ac0][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x0][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe0) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][GetVersionExW(lpVersionInformation = "Ĕ") = 0x1][HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x5004e6c][EncodePointer(Ptr = 0) = 0x0][api _CrtSetDbgBlockType (msvcrt) is not implemented][EncodePointer(Ptr = 0x103da620) = 0x103da620][InitializeCriticalSectionEx(lpCriticalSection = 0x104541cc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454204, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045423c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454274, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542ac, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542e4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045431c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454354, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045438c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543c4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543fc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454434, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045446c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104544a4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][FlsAlloc(lpCallback = 0x10406700) = 0x4][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x214) = 0x5005e6c][FlsSetValue(dwFlsIndex = 0x4, lpFlsData = 0x5005e6c) = 0x1][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][GetStartupInfoW(lpStartupInfo = 0xffffcf98) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x480) = 0x500609c][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060a8, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060cc, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060f0, dwSpinCount = 0xfa0) = 0x1][GetEnvironmentStringsW() = 0x500651c][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][malloc(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x500651c) = 0x1][GetCommandLineA() = 0x500651e][GetCommandLineW() = 0x5006543][api _setmbcp (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetACP() = 0x1b5][malloc(size = 0x220) = 0x500658b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf84) = 0x1][memset(dest = 0x50065a7, c = 0, count = 0x101) = 0x50065a7][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffca48) = 0x1][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf14, c = 0x20, count = 0x17) = 0xffffcf14][memset(dest = 0xffffcf5b, c = 0x20, count = 0x1) = 0xffffcf5b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc7c8, c = 0, count = 0x200) = 0xffffc7c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc7c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc7c8, cchSrc = 0x100, lpCharType = 0xffffca5c) = 0x1][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc758, cchWideChar = 0x100) = 0x100][LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ue076잟Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x106][LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ue076잟Ā", cchSrc = 0x100, lpDestStr = 0xffffc538, cchDest = 0x106) = 0x106][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc538, cchWideChar = 0x106, lpMultiByteStr = 0xffffcd5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc778, cchWideChar = 0x100) = 0x100][LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ue016잟Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x106][LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ue016잟Ā", cchSrc = 0x100, lpDestStr = 0xffffc558, cchDest = 0x106) = 0x106][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc558, cchWideChar = 0x106, lpMultiByteStr = 0xffffcc5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x4) = 0x50067ab][free(address = 0x500190b)][_initterm_e(pfbegin = 0x103a1ed4, pfend = 0x103a1ee8) = 0x0][_initterm(pfbegin = 0x103a1ec8, pfend = 0x103a1ed0) = 0x0][Returned from msvcrt.dll DllMain][Done loading msvcrt.dll][Failed to resolve api-ms-win-eventing-controller-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-1.dll][Loading sechost.dll ...][Loading rpcrt4.dll ...][Calling rpcrt4.dll DllMain at 0x4efbbf30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfc8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x0][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02dafc, dwSpinCount = 0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02db24, dwSpinCount = 0, Flags = 0) = 0x1][api RtlInitializeCriticalSectionAndSpinCount (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeCriticalSection(lpCriticalSection = 0x4f02da04) = 0x1][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][Returned from rpcrt4.dll DllMain][Done loading rpcrt4.dll][Calling sechost.dll DllMain at 0x10480d20][_initterm_e(pfbegin = 0x10461c3c, pfend = 0x10461c40) = 0x0][_initterm(pfbegin = 0x10461c20, pfend = 0x10461c38) = 0x0][DisableThreadLibraryCalls(hLibModule = 0x10460000) = 0x1][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeSRWLock(SRWLock = 0x104caaac)][api EventRegister (kernelbase) is not implemented][Error encountered while running sechost.dll DllMain, bailing][Done loading sechost.dll][Failed to resolve api-ms-win-service-core-l1-1-0.dll][Failed to resolve api-ms-win-service-core-l1-1-1.dll][Failed to resolve api-ms-win-service-core-l1-1-2.dll][Failed to resolve api-ms-win-service-management-l1-1-0.dll][Failed to resolve api-ms-win-service-management-l2-1-0.dll][Failed to resolve api-ms-win-service-private-l1-1-4.dll][Failed to resolve api-ms-win-service-private-l1-1-2.dll][Failed to resolve api-ms-win-service-private-l1-1-3.dll][Failed to resolve api-ms-win-service-private-l1-1-0.dll][Failed to resolve api-ms-win-service-winsvc-l1-1-0.dll][Failed to resolve api-ms-win-security-audit-l1-1-1.dll][Failed to resolve api-ms-win-security-audit-l1-1-0.dll][Done loading advapi32.dll][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcff0)][GetCurrentThreadId() = 0x0][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x446d9c, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x40312a) = 0x5][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x5, lpFlsData = 0x446d74) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x447af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b68, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b80, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b98, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bb0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bc8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447be0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bf8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c10, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c28, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x422fb5) = 0x6][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x6) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0xffffffff) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x364) = 0x5006993][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0x5006993) = 0x1][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b50) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b50) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0xe00) = 0x5006cf7][InitializeCriticalSectionEx(lpCriticalSection = 0x5006cf7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d2f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d67, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d9f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006dd7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e0f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e47, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e7f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eb7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f27, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f5f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f97, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006fcf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007007, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500703f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007077, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500711f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007157, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500718f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007237, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500726f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007317, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500734f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007387, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073bf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073f7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500742f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007467, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500749f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50074d7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500750f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007547, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500757f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075b7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075ef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007627, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500765f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007697, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50076cf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007707, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500773f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007777, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500781f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007857, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500788f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007937, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500796f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a17, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a4f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a87, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007abf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf28) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetCommandLineA() = 0x5007b13][GetCommandLineW() = 0x5007b38][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][GetACP() = 0x1b5][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x220) = 0x5007b80][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcd20) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc5e4) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc378, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc378, cchSrc = 0x100, lpCharType = 0xffffc5f8) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc338, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15                                                                                                                                                                                                           ßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15                                                                                                                                                                                                           ßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0xffffc128, cchDest = 0x104, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc128, cchWideChar = 0x104, lpMultiByteStr = 0xffffcaf8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc348, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15                                                                                                                                                                                                           ßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15                                                                                                                                                                                                           ßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc138, cchDest = 0x102, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc138, cchWideChar = 0x102, lpMultiByteStr = 0xffffc9f8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b20) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x80) = 0x5007da0][LeaveCriticalSection(lpCriticalSection = 0x447b20) = 0x0][GetModuleFileNameW(hModule = 0, lpFilename = 0xffffcd70, nSize = 0x105) = 0x11][GetProcAddress(hModule = 0x6b800000, lpProcName = "AreFileApisANSI") = 0x6b821d80][AreFileApisANSI() = 0x1][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0x447458, cbMultiByte = 0x104, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x2b) = 0x5007e20][InitializeSListHead(ListHead = 0x446d50) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5007e4b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x5007e4b) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x4) = 0x5007e4d][HeapFree(hHeap = 0x5000000, dwFlags = 0, lpMem = 0x500190b) = True][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x800) = 0x5007e51][InitializeCriticalSectionEx(lpCriticalSection = 0x4460a0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4460d8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x446110, dwSpinCount = 0xfa0, Flags = 0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][SetUnhandledExceptionFilter(lpTopLevelExceptionFilter = 0x4021bb) = 0x0][GetCurrentProcess() = 0x7cc][OpenProcessToken(ProcessHandle = 0x7cc, DesiredAccess = 0x28, TokenHandle = 0xffffcfa0) = 0x1][api LookupPrivilegeValueW (advapi32) is not implemented][LocalAlloc(uFlags = 0x40, uBytes = 0x1c) = 0x500865d][api NdrClientCall4 (rpcrt4) is not implemented][api NdrClientCall2 (rpcrt4) is not implemented][memset(dest = 0xffffc860, c = 0, count = 0xdc) = 0xffffc860][memset(dest = 0xffffc96c, c = 0, count = 0x94) = 0xffffc96c][api RpcBindingCreateW (rpcrt4) is not implemented][api RtlEnterCriticalSection (ntdll) is not implemented][LoadLibraryExW(lpLibFileName = "rpcrt4.dll", hFile = 0, dwFlags = 0) = 0x4ef80000][ZwQuerySystemInformation(SystemInformationClass = 0, SystemInformation = 0xffffc6e0, SystemInformationLength = 0x2c, ReturnLength = 0) = 0x0][api RtlGetNtProductType (ntdll) is not implemented][api RtlGetCurrentServiceSessionId (ntdll) is not implemented][ZwOpenKey(KeyHandle = 0xffffc694, DesiredAccess = 0x1, ObjectAttributes = 0xffffc64c) = 0x0][api ZwQueryValueKey (ntdll) is not implemented][CPU Context:][ah	: 0x0][al	: 0x17][ch	: 0x0][cl	: 0x0][dh	: 0x88][dl	: 0x10][bh	: 0x0][bl	: 0x1][ax	: 0x17][cx	: 0x0][dx	: 0x8810][bx	: 0x1][sp	: 0xc618][bp	: 0xc6c0][si	: 0x0][di	: 0xc6dc][ip	: 0x0][eax	: 0x17][ecx	: 0x0][edx	: 0x4b308810][ebx	: 0x1][esp	: 0xffffc618][ebp	: 0xffffc6c0][esi	: 0x0][edi	: 0xffffc6dc][eip	: 0x0][cr0	: 0x11][cr1	: 0x0][cr2	: 0x0][cr3	: 0x0][cr4	: 0x0][cr8	: 0x0][dr0	: 0x0][dr1	: 0x0][dr2	: 0x0][dr3	: 0x0][dr4	: 0x0][dr5	: 0x0][dr6	: 0xffff0ff0][dr7	: 0x400][st0	: 0x0][st1	: 0x0][st2	: 0x0][st3	: 0x0][st4	: 0x0][st5	: 0x0][st6	: 0x0][st7	: 0x0][eflags	: 0x46][cs	: 0x1b][ss	: 0x28][ds	: 0x28][es	: 0x28][fs	: 0x73][gs	: 0x7b][PC = 0x00000000 (unreachable)
][Memory map:][Start        End          Perm    Label                 Image][0000006000 - 000000c000   rwx     [FS]                  ][0000030000 - 0000031000   rwx     [GDT]                 ][0000400000 - 0000449000   rwx     inject.exe            D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0005000000 - 0005001000   rwx     [heap]                ][0005001000 - 0005002000   rwx     [heap]                ][0005002000 - 0005003000   rwx     [heap]                ][0005003000 - 0005004000   rwx     [heap]                ][0005004000 - 0005005000   rwx     [heap]                ][0005005000 - 0005006000   rwx     [heap]                ][0005006000 - 0005007000   rwx     [heap]                ][0005007000 - 0005008000   rwx     [heap]                ][0005008000 - 0005009000   rwx     [heap]                ][0006000000 - 0007400000   rwx     [GS]                  ][0010000000 - 0010218000   rwx     kernelbase.dll        D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\KERNELBASE.dll][0010220000 - 0010272000   rwx     mscoree.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\mscoree.dll][0010280000 - 00103a0000   rwx     ucrtbase.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ucrtbase.dll][00103a0000 - 001045f000   rwx     msvcrt.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\msvcrt.dll][0010460000 - 00104d6000   rwx     sechost.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\SECHOST.dll][004b280000 - 004b423000   rwx     ntdll.dll             D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ntdll.dll][004c300000 - 004c37b000   rwx     advapi32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ADVAPI32.dll][004ef80000 - 004f03e000   rwx     rpcrt4.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\RPCRT4.dll][006b800000 - 006b8f0000   rwx     kernel32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\kernel32.dll][007ffe0000 - 007ffe1000   rwx     [kuser shared data]   ][00fffdd000 - 00ffffe000   rwx     [stack]               ][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x446d9c, dwSpinCount = 0xfa0, Flags = 0) = 0x1][FlsAlloc(lpCallback = 0x40312a) = 0x7][FlsSetValue(dwFlsIndex = 0x7, lpFlsData = 0x446d74) = 0x1][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x447af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b68, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b80, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b98, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bb0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bc8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447be0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bf8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c10, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c28, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x422fb5) = 0x8][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x8) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x8, lpFlsData = 0xffffffff) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x364) = 0x5008679][FlsSetValue(dwFlsIndex = 0x8, lpFlsData = 0x5008679) = 0x1][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b50) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b50) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffc530) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetCommandLineA() = 0x50089f9][GetCommandLineW() = 0x5008a1e][GetCurrentProcess() = 0x7cc][OpenProcessToken(ProcessHandle = 0x7cc, DesiredAccess = 0x28, TokenHandle = 0xffffc5a8) = 0x1][api LookupPrivilegeValueW (advapi32) is not implemented][LocalAlloc(uFlags = 0x40, uBytes = 0x1c) = 0x5008a72][api NdrClientCall4 (rpcrt4) is not implemented][api NdrClientCall2 (rpcrt4) is not implemented][memset(dest = 0xffffbe68, c = 0, count = 0xdc) = 0xffffbe68][memset(dest = 0xffffbf74, c = 0, count = 0x94) = 0xffffbf74][api RpcBindingCreateW (rpcrt4) is not implemented][api RtlEnterCriticalSection (ntdll) is not implemented][LoadLibraryExW(lpLibFileName = "rpcrt4.dll", hFile = 0, dwFlags = 0) = 0x4ef80000][ZwQuerySystemInformation(SystemInformationClass = 0, SystemInformation = 0xffffbce8, SystemInformationLength = 0x2c, ReturnLength = 0) = 0x0][api RtlGetNtProductType (ntdll) is not implemented][api RtlGetCurrentServiceSessionId (ntdll) is not implemented][ZwOpenKey(KeyHandle = 0xffffbc9c, DesiredAccess = 0x1, ObjectAttributes = 0xffffbc54) = 0x0][api ZwQueryValueKey (ntdll) is not implemented][CPU Context:][ah	: 0x0][al	: 0x17][ch	: 0x0][cl	: 0x0][dh	: 0x88][dl	: 0x10][bh	: 0x0][bl	: 0x1][ax	: 0x17][cx	: 0x0][dx	: 0x8810][bx	: 0x1][sp	: 0xbc20][bp	: 0xbcc8][si	: 0x0][di	: 0xbce4][ip	: 0x0][eax	: 0x17][ecx	: 0x0][edx	: 0x4b308810][ebx	: 0x1][esp	: 0xffffbc20][ebp	: 0xffffbcc8][esi	: 0x0][edi	: 0xffffbce4][eip	: 0x0][cr0	: 0x11][cr1	: 0x0][cr2	: 0x0][cr3	: 0x0][cr4	: 0x0][cr8	: 0x0][dr0	: 0x0][dr1	: 0x0][dr2	: 0x0][dr3	: 0x0][dr4	: 0x0][dr5	: 0x0][dr6	: 0xffff0ff0][dr7	: 0x400][st0	: 0x0][st1	: 0x0][st2	: 0x0][st3	: 0x0][st4	: 0x0][st5	: 0x0][st6	: 0x0][st7	: 0x0][eflags	: 0x46][cs	: 0x1b][ss	: 0x28][ds	: 0x28][es	: 0x28][fs	: 0x73][gs	: 0x7b][PC = 0x00000000 (unreachable)
][Memory map:][Start        End          Perm    Label                 Image][0000006000 - 000000c000   rwx     [FS]                  ][0000030000 - 0000031000   rwx     [GDT]                 ][0000400000 - 0000449000   rwx     inject.exe            D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0005000000 - 0005001000   rwx     [heap]                ][0005001000 - 0005002000   rwx     [heap]                ][0005002000 - 0005003000   rwx     [heap]                ][0005003000 - 0005004000   rwx     [heap]                ][0005004000 - 0005005000   rwx     [heap]                ][0005005000 - 0005006000   rwx     [heap]                ][0005006000 - 0005007000   rwx     [heap]                ][0005007000 - 0005008000   rwx     [heap]                ][0005008000 - 0005009000   rwx     [heap]                ][0006000000 - 0007400000   rwx     [GS]                  ][0010000000 - 0010218000   rwx     kernelbase.dll        D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\KERNELBASE.dll][0010220000 - 0010272000   rwx     mscoree.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\mscoree.dll][0010280000 - 00103a0000   rwx     ucrtbase.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ucrtbase.dll][00103a0000 - 001045f000   rwx     msvcrt.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\msvcrt.dll][0010460000 - 00104d6000   rwx     sechost.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\SECHOST.dll][004b280000 - 004b423000   rwx     ntdll.dll             D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ntdll.dll][004c300000 - 004c37b000   rwx     advapi32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ADVAPI32.dll][004ef80000 - 004f03e000   rwx     rpcrt4.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\RPCRT4.dll][006b800000 - 006b8f0000   rwx     kernel32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\kernel32.dll][007ffe0000 - 007ffe1000   rwx     [kuser shared data]   ][00fffdd000 - 00ffffe000   rwx     [stack]               ][=] 	Initiate stack address at 0xfffdd000 
[=] 	Loading D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe to 0x400000
[=] 	PE entry point at 0x401691
[=] 	TEB is at 0x6000
[=] 	PEB is at 0x61b0
[=] 	LDR is at 0x6630
[=] 	Loading ntdll.dll ...
[=] 	Done loading ntdll.dll
[=] 	Loading kernel32.dll ...
[=] 	Loading kernelbase.dll ...
[=] 	Done loading kernelbase.dll
[=] 	Done loading kernel32.dll
[=] 	Loading mscoree.dll ...
[=] 	Calling mscoree.dll DllMain at 0x1024f100
[=] 	GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)
[=] 	GetCurrentProcessId() = 0x7cc
[=] 	GetCurrentThreadId() = 0x0
[=] 	GetTickCount() = 0x30d40
[=] 	QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0
[=] 	GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[=] 	HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x50006d0
[=] 	GetModuleHandleW(lpModuleName = "KERNELBASE.DLL") = 0x10000000
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsAlloc") = 0x10129d30
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsGetValue") = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsSetValue") = 0x1011c300
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "FlsFree") = 0x1012cdc0
[=] 	TlsAlloc() = 0x0
[=] 	TlsSetValue(dwTlsIndex = 0, lpTlsValue = 0x10113c90) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10252da0) = 0x10252da0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10251f50) = 0x10251f50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x10113c90) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	EncodePointer(Ptr = 0x1012cdc0) = 0x1012cdc0
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d80, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d98, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268db0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268dc8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268de0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268df8, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e10, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e28, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e40, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e58, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e70, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e88, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268ea0, dwSpinCount = 0xfa0) = 0x1
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268eb8, dwSpinCount = 0xfa0) = 0x1
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x10129d30) = 0x10129d30
[=] 	FlsAlloc(lpCallback = 0x102519d0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x214) = 0x50016d0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x0
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	DecodePointer(Ptr = 0x1011c300) = 0x1011c300
[=] 	FlsSetValue(dwFlsIndex = 0, lpFlsData = 0x50016d0) = 0x1
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[=] 	GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[=] 	GetCommandLineA() = 0x50018e4
[=] 	GetEnvironmentStringsW() = 0x5001909
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x1) = 0x500190b
[=] 	WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[=] 	FreeEnvironmentStringsW(penv = 0x5001909) = 0x1
[=] 	GetStartupInfoW(lpStartupInfo = 0xffffce30) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x480) = 0x5001928
[=] 	GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6
[=] 	GetFileType(hFile = 0xfffffff6) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001934, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5
[=] 	GetFileType(hFile = 0xfffffff5) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001958, dwSpinCount = 0xfa0) = 0x1
[=] 	GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4
[=] 	GetFileType(hFile = 0xfffffff4) = 0x2
[=] 	InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x500197c, dwSpinCount = 0xfa0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetACP() = 0x1b5
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x220) = 0x5001da8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	IsValidCodePage(CodePage = 0x1b5) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcdf8) = 0x1
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc8bc) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc638, cchWideChar = 0x100) = 0x100
[=] 	GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc638, cchSrc = 0x100, lpCharType = 0xffffc8d0) = 0x1
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3b8, cchDest = 0x102) = 0x102
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3b8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcbd0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[=] 	MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5e8, cchWideChar = 0x100) = 0x100
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[=] 	LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3d8, cchDest = 0x102) = 0x102
[=] 	WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3d8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcad0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[=] 	GetModuleFileNameA(hModule = 0, lpFilename = 0x10268938, nSize = 0x104) = 0x11
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x2b) = 0x5001fc8
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	GetLastError() = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	SetLastError(dwErrCode = 0)
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x4) = 0x5001ff3
[=] 	HeapFree(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x500190b) = True
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eea0) = 0x1025eea0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef50) = 0x1025ef50
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efc0) = 0x1025efc0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025f060) = 0x1025f060
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025e560) = 0x1025e560
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025ef70) = 0x1025ef70
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025eec0) = 0x1025eec0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x1025efe0) = 0x1025efe0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0) = 0x0
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x80) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x800) = 0x5002077
[=] 	EnterCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[=] 	HeapSize(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x5001ff7) = 0x80
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x10263a20) = 0x10263a20
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[=] 	FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[=] 	EncodePointer(Ptr = 0x5001ffb) = 0x5001ffb
[=] 	LeaveCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[=] 	GetLastError() = 0x0
[=] 	GetProcessHeap() = 0x5000000
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x14) = 0x5002877
[=] 	CreateMutexW(lpMutexAttributes = 0, bInitialOwner = 0, lpName = 0) = 0x0
[=] 	GetSystemInfo(lpSystemInfo = 0xffffcf74) = 0x0
[!] 	api GlobalMemoryStatus (kernel32) is not implemented
[=] 	memset(dest = 0xffffceb8, c = 0, count = 0x40) = 0xffffceb8
[!] 	api GlobalMemoryStatusEx (kernelbase) is not implemented
[=] 	ZwQuerySystemInformation(SystemInformationClass = 0xb6, SystemInformation = 0xffffce54, SystemInformationLength = 0x38, ReturnLength = 0) = 0x0
[=] 	QueryInformationProcess: no implementation for info class 0x01
[=] 	ZwQueryInformationProcess(ProcessHandle = 0xffffffff, ProcessInformationClass = 0x1, ProcessInformation = 0xffffce04, ProcessInformationLength = 0x20, ReturnLength = 0) = 0xc0000001
[!] 	api RtlNtStatusToDosError (ntdll) is not implemented
[!] 	api RtlSetLastWin32Error (ntdll) is not implemented
[!] 	api RtlImageNtHeader (ntdll) is not implemented
[!] 	api RtlImageNtHeaderEx (ntdll) is not implemented
[=] 	GetACP() = 0x1b5
[=] 	GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf40) = 0x1
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0xcc) = 0x500288b
[=] 	GetLastError() = 0x0
[=] 	HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1a) = 0x5002957
[=] 	HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x18) = 0x5002971
[=] 	InitializeCriticalSection(lpCriticalSection = 0x5002971) = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x1026900c) = 0x1
[=] 	GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[=] 	InitializeCriticalSection(lpCriticalSection = 0x10268ff0) = 0x1
[=] 	Returned from mscoree.dll DllMain
[=] 	Done loading mscoree.dll
[=] 	Loading ucrtbase.dll ...
[Calling ucrtbase.dll DllMain at 0x102aba30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd0)][GetCurrentThreadId() = 0x0][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfc8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10390ec8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x102e1070) = 0x1][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x1, lpFlsData = 0x10390ea0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0) = 0x2][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a18, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a30, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a48, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a60, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a78, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391a90, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391aa8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ac0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391ad8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10391b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][FlsAlloc(lpCallback = 0x102c2cd0) = 0x3][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x3) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0xffffffff) = 0x1][_calloc_base(num = 0x2, size = 0x364) = 0x5002a81][FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0x5002a81) = 0x1][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][_free_base(address = 0)][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][_calloc_base(num = 0x40, size = 0x38) = 0x5003149][InitializeCriticalSectionEx(lpCriticalSection = 0x5003149, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003181, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50031f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003229, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003261, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003299, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50032d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003309, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003341, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003379, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033b1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50033e9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003421, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003459, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003491, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50034c9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003501, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003539, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003571, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035a9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50035e1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003619, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003651, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003689, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036c1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50036f9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003731, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003769, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037a1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50037d9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003811, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003849, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003881, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50038f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003929, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003961, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003999, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50039d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a09, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a41, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003a79, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ab1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ae9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b21, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b59, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003b91, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003bc9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c01, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c39, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003c71, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ca9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ce1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d19, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d51, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003d89, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003dc1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003df9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e31, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003e69, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ea1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003ed9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5003f11, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_free_base(address = 0)][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf40) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][GetCommandLineA() = 0x5003f65][GetCommandLineW() = 0x5003f8a][FlsGetValue(dwFlsIndex = 0x3) = 0x5002a81][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x5003fd2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x5003fea, c = 0, count = 0x101) = 0x5003fea][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x5003fea, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x50040eb, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetACP() = 0x1b5][_malloc_base(size = 0x220) = 0x50041f2][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][memset(dest = 0x500420a, c = 0, count = 0x101) = 0x500420a][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][__strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103907f0, src = 0x500420a, count = 0x101) = 0x103907f0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][memcpy(dest = 0x103905f0, src = 0x500430b, count = 0x100) = 0x103905f0][LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][_free_base(address = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x2) = 0x0][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5004412][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_malloc_base(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][_free_base(address = 0)][FreeEnvironmentStringsW(penv = 0x5004412) = 0x1][_calloc_base(num = 0x1, size = 0x4) = 0x5004414][_free_base(address = 0)][_free_base(address = 0)][_free_base(address = 0x500190b)][api _initialize_onexit_table (ucrtbase) is not implemented][api _initialize_onexit_table (ucrtbase) is not implemented][QueryPerformanceFrequency(lpFrequency = 0xffffcfa4) = 0x1][QueryPerformanceCounter(lpPerformanceCount = 0xffffcf9c) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][_calloc_base(num = 0x200, size = 0x4) = 0x5004418][_free_base(address = 0)][InitializeCriticalSectionEx(lpCriticalSection = 0x10390310, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390348, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10390380, dwSpinCount = 0xfa0, Flags = 0) = 0x1][_initterm(pfbegin = 0x10283918, pfend = 0x1028391c) = 0x0][Returned from ucrtbase.dll DllMain][Done loading ucrtbase.dll][Loading advapi32.dll ...][Loading msvcrt.dll ...][Calling msvcrt.dll DllMain at 0x103d5ac0][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x0][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe0) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][GetVersionExW(lpVersionInformation = "Ĕ") = 0x1][HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x5004e6c][EncodePointer(Ptr = 0) = 0x0][api _CrtSetDbgBlockType (msvcrt) is not implemented][EncodePointer(Ptr = 0x103da620) = 0x103da620][InitializeCriticalSectionEx(lpCriticalSection = 0x104541cc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454204, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045423c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454274, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542ac, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104542e4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045431c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454354, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045438c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543c4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104543fc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x10454434, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x1045446c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x104544a4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][FlsAlloc(lpCallback = 0x10406700) = 0x4][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x214) = 0x5005e6c][FlsSetValue(dwFlsIndex = 0x4, lpFlsData = 0x5005e6c) = 0x1][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][GetModuleHandleW(lpModuleName = 0) = 0x400000][GetStartupInfoW(lpStartupInfo = 0xffffcf98) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x480) = 0x500609c][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060a8, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060cc, dwSpinCount = 0xfa0) = 0x1][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060f0, dwSpinCount = 0xfa0) = 0x1][GetEnvironmentStringsW() = 0x500651c][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][malloc(size = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x500651c) = 0x1][GetCommandLineA() = 0x500651e][GetCommandLineW() = 0x5006543][api _setmbcp (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][GetACP() = 0x1b5][malloc(size = 0x220) = 0x500658b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf84) = 0x1][memset(dest = 0x50065a7, c = 0, count = 0x101) = 0x50065a7][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffca48) = 0x1][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][memset(dest = 0xffffcf14, c = 0x20, count = 0x17) = 0xffffcf14][memset(dest = 0xffffcf5b, c = 0x20, count = 0x1) = 0xffffcf5b][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][memset(dest = 0xffffc7c8, c = 0, count = 0x200) = 0xffffc7c8][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc7c8, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc7c8, cchSrc = 0x100, lpCharType = 0xffffca5c) = 0x1][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc758, cchWideChar = 0x100) = 0x100][LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ueb87㵟Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x106][LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\ueb87㵟Ā", cchSrc = 0x100, lpDestStr = 0xffffc538, cchDest = 0x106) = 0x106][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc538, cchWideChar = 0x106, lpMultiByteStr = 0xffffcd5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][SetLastError(dwErrCode = 0)][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc778, cchWideChar = 0x100) = 0x100][LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\uebe7㵟Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x106][LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿ\uebe7㵟Ā", cchSrc = 0x100, lpDestStr = 0xffffc558, cchDest = 0x106) = 0x106][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc558, cchWideChar = 0x106, lpMultiByteStr = 0xffffcc5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api _lock (msvcrt) is not implemented][EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x4) = 0x50067ab][free(address = 0x500190b)][_initterm_e(pfbegin = 0x103a1ed4, pfend = 0x103a1ee8) = 0x0][_initterm(pfbegin = 0x103a1ec8, pfend = 0x103a1ed0) = 0x0][Returned from msvcrt.dll DllMain][Done loading msvcrt.dll][Failed to resolve api-ms-win-eventing-controller-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-1.dll][Loading sechost.dll ...][Loading rpcrt4.dll ...][Calling rpcrt4.dll DllMain at 0x4efbbf30][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfc8)][GetCurrentProcessId() = 0x7cc][GetCurrentThreadId() = 0x0][GetTickCount() = 0x30d40][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02dafc, dwSpinCount = 0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4f02db24, dwSpinCount = 0, Flags = 0) = 0x1][api RtlInitializeCriticalSectionAndSpinCount (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeCriticalSection(lpCriticalSection = 0x4f02da04) = 0x1][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][Returned from rpcrt4.dll DllMain][Done loading rpcrt4.dll][Calling sechost.dll DllMain at 0x10480d20][_initterm_e(pfbegin = 0x10461c3c, pfend = 0x10461c40) = 0x0][_initterm(pfbegin = 0x10461c20, pfend = 0x10461c38) = 0x0][DisableThreadLibraryCalls(hLibModule = 0x10460000) = 0x1][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][InitializeSRWLock(SRWLock = 0x104caaac)][api EventRegister (kernelbase) is not implemented][Error encountered while running sechost.dll DllMain, bailing][Done loading sechost.dll][Failed to resolve api-ms-win-service-core-l1-1-0.dll][Failed to resolve api-ms-win-service-core-l1-1-1.dll][Failed to resolve api-ms-win-service-core-l1-1-2.dll][Failed to resolve api-ms-win-service-management-l1-1-0.dll][Failed to resolve api-ms-win-service-management-l2-1-0.dll][Failed to resolve api-ms-win-service-private-l1-1-4.dll][Failed to resolve api-ms-win-service-private-l1-1-2.dll][Failed to resolve api-ms-win-service-private-l1-1-3.dll][Failed to resolve api-ms-win-service-private-l1-1-0.dll][Failed to resolve api-ms-win-service-winsvc-l1-1-0.dll][Failed to resolve api-ms-win-security-audit-l1-1-1.dll][Failed to resolve api-ms-win-security-audit-l1-1-0.dll][Done loading advapi32.dll][GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcff0)][GetCurrentThreadId() = 0x0][GetCurrentProcessId() = 0x7cc][QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe8) = 0x0][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x446d9c, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x40312a) = 0x5][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x5, lpFlsData = 0x446d74) = 0x1][LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][InitializeCriticalSectionEx(lpCriticalSection = 0x447af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b68, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b80, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447b98, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bb0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bc8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447be0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447bf8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c10, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x447c28, dwSpinCount = 0xfa0, Flags = 0) = 0x1][GetProcessHeap() = 0x5000000][LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-0", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][FlsAlloc(lpCallback = 0x422fb5) = 0x6][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][FlsGetValue(dwFlsIndex = 0x6) = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0xffffffff) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x364) = 0x5006993][FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0x5006993) = 0x1][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b50) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b50) = 0x0][SetLastError(dwErrCode = 0)][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0xe00) = 0x5006cf7][InitializeCriticalSectionEx(lpCriticalSection = 0x5006cf7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d2f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d67, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006d9f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006dd7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e0f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e47, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006e7f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eb7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006eef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f27, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f5f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006f97, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5006fcf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007007, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500703f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007077, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50070e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500711f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007157, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500718f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50071ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007237, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500726f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50072df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007317, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500734f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007387, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073bf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50073f7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500742f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007467, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500749f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50074d7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500750f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007547, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500757f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075b7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50075ef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007627, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500765f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007697, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50076cf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007707, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500773f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007777, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50077e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500781f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007857, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500788f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50078ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007937, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x500796f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x50079df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a17, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a4f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007a87, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x5007abf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetStartupInfoW(lpStartupInfo = 0xffffcf28) = 0x0][GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][GetFileType(hFile = 0xfffffff6) = 0x2][GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][GetFileType(hFile = 0xfffffff5) = 0x2][GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][GetFileType(hFile = 0xfffffff4) = 0x2][LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][GetCommandLineA() = 0x5007b13][GetCommandLineW() = 0x5007b38][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][GetACP() = 0x1b5][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x220) = 0x5007b80][IsValidCodePage(CodePage = 0x1b5) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcd20) = 0x1][GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc5e4) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc378, cchWideChar = 0x100) = 0x100][GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc378, cchSrc = 0x100, lpCharType = 0xffffc5f8) = 0x1][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc338, cchWideChar = 0x100) = 0x100][LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][GetLastError() = 0x0][GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµ     ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµ     ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0xffffc128, cchDest = 0x104, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc128, cchWideChar = 0x104, lpMultiByteStr = 0xffffcaf8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc348, cchWideChar = 0x100) = 0x100][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµ     ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµ     ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc138, cchDest = 0x102, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc138, cchWideChar = 0x102, lpMultiByteStr = 0xffffc9f8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][EnterCriticalSection(lpCriticalSection = 0x447b20) = 0x0][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x80) = 0x5007da0][LeaveCriticalSection(lpCriticalSection = 0x447b20) = 0x0][GetModuleFileNameW(hModule = 0, lpFilename = 0xffffcd70, nSize = 0x105) = 0x11][GetProcAddress(hModule = 0x6b800000, lpProcName = "AreFileApisANSI") = 0x6b821d80][AreFileApisANSI() = 0x1][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0x447458, cbMultiByte = 0x104, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x2b) = 0x5007e20][InitializeSListHead(ListHead = 0x446d50) = 0x0][GetLastError() = 0x0][FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][SetLastError(dwErrCode = 0)][GetEnvironmentStringsW() = 0x5007e4b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1) = 0x500190b][WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][FreeEnvironmentStringsW(penv = 0x5007e4b) = 0x1][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x4) = 0x5007e4d][HeapFree(hHeap = 0x5000000, dwFlags = 0, lpMem = 0x500190b) = True][HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x800) = 0x5007e51][InitializeCriticalSectionEx(lpCriticalSection = 0x4460a0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x4460d8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][InitializeCriticalSectionEx(lpCriticalSection = 0x446110, dwSpinCount = 0xfa0, Flags = 0) = 0x1][IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][SetUnhandledExceptionFilter(lpTopLevelExceptionFilter = 0x4021bb) = 0x0][GetCurrentProcess() = 0x7cc][OpenProcessToken(ProcessHandle = 0x7cc, DesiredAccess = 0x28, TokenHandle = 0xffffcfa0) = 0x1][api LookupPrivilegeValueW (advapi32) is not implemented][LocalAlloc(uFlags = 0x40, uBytes = 0x1c) = 0x500865d][api NdrClientCall4 (rpcrt4) is not implemented][api NdrClientCall2 (rpcrt4) is not implemented][memset(dest = 0xffffc860, c = 0, count = 0xdc) = 0xffffc860][memset(dest = 0xffffc96c, c = 0, count = 0x94) = 0xffffc96c][api RpcBindingCreateW (rpcrt4) is not implemented][api RtlEnterCriticalSection (ntdll) is not implemented][LoadLibraryExW(lpLibFileName = "rpcrt4.dll", hFile = 0, dwFlags = 0) = 0x4ef80000][ZwQuerySystemInformation(SystemInformationClass = 0, SystemInformation = 0xffffc6e0, SystemInformationLength = 0x2c, ReturnLength = 0) = 0x0][api RtlGetNtProductType (ntdll) is not implemented][api RtlGetCurrentServiceSessionId (ntdll) is not implemented][ZwOpenKey(KeyHandle = 0xffffc694, DesiredAccess = 0x1, ObjectAttributes = 0xffffc64c) = 0x0][api ZwQueryValueKey (ntdll) is not implemented][CPU Context:][ah	: 0x0][al	: 0x17][ch	: 0x0][cl	: 0x0][dh	: 0x88][dl	: 0x10][bh	: 0x0][bl	: 0x1][ax	: 0x17][cx	: 0x0][dx	: 0x8810][bx	: 0x1][sp	: 0xc618][bp	: 0xc6c0][si	: 0x0][di	: 0xc6dc][ip	: 0x0][eax	: 0x17][ecx	: 0x0][edx	: 0x4b308810][ebx	: 0x1][esp	: 0xffffc618][ebp	: 0xffffc6c0][esi	: 0x0][edi	: 0xffffc6dc][eip	: 0x0][cr0	: 0x11][cr1	: 0x0][cr2	: 0x0][cr3	: 0x0][cr4	: 0x0][cr8	: 0x0][dr0	: 0x0][dr1	: 0x0][dr2	: 0x0][dr3	: 0x0][dr4	: 0x0][dr5	: 0x0][dr6	: 0xffff0ff0][dr7	: 0x400][st0	: 0x0][st1	: 0x0][st2	: 0x0][st3	: 0x0][st4	: 0x0][st5	: 0x0][st6	: 0x0][st7	: 0x0][eflags	: 0x46][cs	: 0x1b][ss	: 0x28][ds	: 0x28][es	: 0x28][fs	: 0x73][gs	: 0x7b][PC = 0x00000000 (unreachable)
][Memory map:][Start        End          Perm    Label                 Image][0000006000 - 000000c000   rwx     [FS]                  ][0000030000 - 0000031000   rwx     [GDT]                 ][0000400000 - 0000449000   rwx     inject.exe            D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0005000000 - 0005001000   rwx     [heap]                ][0005001000 - 0005002000   rwx     [heap]                ][0005002000 - 0005003000   rwx     [heap]                ][0005003000 - 0005004000   rwx     [heap]                ][0005004000 - 0005005000   rwx     [heap]                ][0005005000 - 0005006000   rwx     [heap]                ][0005006000 - 0005007000   rwx     [heap]                ][0005007000 - 0005008000   rwx     [heap]                ][0005008000 - 0005009000   rwx     [heap]                ][0006000000 - 0007400000   rwx     [GS]                  ][0010000000 - 0010218000   rwx     kernelbase.dll        D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\KERNELBASE.dll][0010220000 - 0010272000   rwx     mscoree.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\mscoree.dll][0010280000 - 00103a0000   rwx     ucrtbase.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ucrtbase.dll][00103a0000 - 001045f000   rwx     msvcrt.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\msvcrt.dll][0010460000 - 00104d6000   rwx     sechost.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\SECHOST.dll][004b280000 - 004b423000   rwx     ntdll.dll             D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ntdll.dll][004c300000 - 004c37b000   rwx     advapi32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ADVAPI32.dll][004ef80000 - 004f03e000   rwx     rpcrt4.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\RPCRT4.dll][006b800000 - 006b8f0000   rwx     kernel32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\kernel32.dll][007ffe0000 - 007ffe1000   rwx     [kuser shared data]   ][00fffdd000 - 00ffffe000   rwx     [stack]               ][+] 	Profile: default
[+] 	Mapping GDT at 0x30000 with limit 0x1000
[+] 	Loading Windows registry hive from D:\scriptmalsolver\rootfs\x86_windows\Windows\registry
[=] 	Initiate stack address at 0xfffdd000 
[=] 	Loading D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe to 0x400000
[=] 	PE entry point at 0x401691
[=] 	TEB is at 0x6000
[=] 	PEB is at 0x61b0
[=] 	LDR is at 0x6630
[=] 	Loading ntdll.dll ...
[+] 	Warnings while loading ntdll.dll:
[+] 	 - SizeOfHeaders is smaller than AddressOfEntryPoint: this file cannot run under Windows 8.
[+] 	 - AddressOfEntryPoint lies outside the sections' boundaries. AddressOfEntryPoint: 0x0
[+] 	DLL preferred base address: 0x4b280000
[+] 	Init imports for ntdll.dll
[=] 	Done loading ntdll.dll
[=] 	Loading kernel32.dll ...
[+] 	DLL preferred base address: 0x6b800000
[+] 	Init imports for kernel32.dll
[+] 	Requesting imports from api-ms-win-core-rtlsupport-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-rtlsupport-l1-1-0.dll to ntdll.dll
[+] 	Requesting imports from api-ms-win-core-rtlsupport-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-rtlsupport-l1-2-0.dll to ntdll.dll
[+] 	Requesting imports from ntdll.dll
[+] 	Requesting imports from kernelbase.dll
[=] 	Loading kernelbase.dll ...
[+] 	DLL preferred base address: 0x10000000
[+] 	Init imports for kernelbase.dll
[+] 	Requesting imports from ntdll.dll
[+] 	Requesting imports from api-ms-win-eventing-provider-l1-1-0.dll
[+] 	Redirecting api-ms-win-eventing-provider-l1-1-0.dll to kernelbase.dll
[+] 	Ignoring kernelbase.dll entry point
[=] 	Done loading kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processthreads-l1-1-3.dll
[+] 	Redirecting api-ms-win-core-processthreads-l1-1-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processthreads-l1-1-2.dll
[+] 	Redirecting api-ms-win-core-processthreads-l1-1-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processthreads-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-processthreads-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-registry-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-registry-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-heap-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-heap-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-heap-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-heap-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-memory-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-memory-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-memory-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-memory-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-memory-l1-1-2.dll
[+] 	Redirecting api-ms-win-core-memory-l1-1-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-handle-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-handle-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-synch-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-synch-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-synch-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-synch-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-synch-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-synch-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-file-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-file-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l1-2-2.dll
[+] 	Redirecting api-ms-win-core-file-l1-2-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-file-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-delayload-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-delayload-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-io-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-io-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-io-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-io-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-job-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-job-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-threadpool-legacy-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-threadpool-legacy-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-threadpool-private-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-threadpool-private-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-libraryloader-l1-2-2.dll
[+] 	Redirecting api-ms-win-core-libraryloader-l1-2-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-libraryloader-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-libraryloader-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-libraryloader-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-libraryloader-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-libraryloader-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-libraryloader-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-namedpipe-l1-2-2.dll
[+] 	Redirecting api-ms-win-core-namedpipe-l1-2-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-namedpipe-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-namedpipe-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-namedpipe-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-namedpipe-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-datetime-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-datetime-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-datetime-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-datetime-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-datetime-l1-1-2.dll
[+] 	Redirecting api-ms-win-core-datetime-l1-1-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-sysinfo-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-sysinfo-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-sysinfo-l1-2-3.dll
[+] 	Redirecting api-ms-win-core-sysinfo-l1-2-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-sysinfo-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-sysinfo-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-timezone-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-timezone-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-localization-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-localization-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-localization-private-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-localization-private-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processsnapshot-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-processsnapshot-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processenvironment-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-processenvironment-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processenvironment-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-processenvironment-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-string-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-string-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-debug-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-debug-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-debug-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-debug-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-errorhandling-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-errorhandling-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-errorhandling-l1-1-3.dll
[+] 	Redirecting api-ms-win-core-errorhandling-l1-1-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-fibers-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-fibers-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-util-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-util-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-profile-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-profile-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-security-base-l1-1-0.dll
[+] 	Redirecting api-ms-win-security-base-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-security-base-l1-2-0.dll
[+] 	Redirecting api-ms-win-security-base-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-comm-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-comm-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-wow64-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-wow64-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-wow64-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-wow64-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-wow64-l1-1-3.dll
[+] 	Redirecting api-ms-win-core-wow64-l1-1-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-realtime-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-realtime-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-systemtopology-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-systemtopology-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-systemtopology-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-systemtopology-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-processtopology-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-processtopology-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-namespace-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-namespace-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l2-1-2.dll
[+] 	Redirecting api-ms-win-core-file-l2-1-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-file-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l2-1-3.dll
[+] 	Redirecting api-ms-win-core-file-l2-1-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-file-l2-1-1.dll
[+] 	Redirecting api-ms-win-core-file-l2-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-xstate-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-xstate-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-xstate-l2-1-1.dll
[+] 	Redirecting api-ms-win-core-xstate-l2-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-localization-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-localization-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-normalization-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-normalization-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-fibers-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-fibers-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-fibers-l2-1-1.dll
[+] 	Redirecting api-ms-win-core-fibers-l2-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-sidebyside-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-sidebyside-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-appcompat-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-appcompat-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-appcompat-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-appcompat-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-windowserrorreporting-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-windowserrorreporting-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-windowserrorreporting-l1-1-3.dll
[+] 	Redirecting api-ms-win-core-windowserrorreporting-l1-1-3.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-windowserrorreporting-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-windowserrorreporting-l1-1-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-windowserrorreporting-l1-1-2.dll
[+] 	Redirecting api-ms-win-core-windowserrorreporting-l1-1-2.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-console-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l1-2-0.dll
[+] 	Redirecting api-ms-win-core-console-l1-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l1-2-1.dll
[+] 	Redirecting api-ms-win-core-console-l1-2-1.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l2-1-0.dll
[+] 	Redirecting api-ms-win-core-console-l2-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l2-2-0.dll
[+] 	Redirecting api-ms-win-core-console-l2-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-console-l3-2-0.dll
[+] 	Redirecting api-ms-win-core-console-l3-2-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-psapi-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-psapi-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-psapi-ansi-l1-1-0.dll
[+] 	Redirecting api-ms-win-core-psapi-ansi-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-security-appcontainer-l1-1-0.dll
[+] 	Redirecting api-ms-win-security-appcontainer-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-eventing-provider-l1-1-0.dll
[+] 	Redirecting api-ms-win-eventing-provider-l1-1-0.dll to kernelbase.dll
[+] 	Requesting imports from api-ms-win-core-delayload-l1-1-1.dll
[+] 	Redirecting api-ms-win-core-delayload-l1-1-1.dll to kernelbase.dll
[+] 	Ignoring kernel32.dll entry point
[=] 	Done loading kernel32.dll
[=] 	Loading mscoree.dll ...
[+] 	DLL preferred base address: 0x10000000
[+] 	DLL preferred base address is taken, loading to: 0x10220000
[+] 	Init imports for mscoree.dll
[+] 	Requesting imports from kernel32.dll
[=] 	Calling mscoree.dll DllMain at 0x1024f100
[+] 	0x6b81f390: GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)
[+] 	0x6b822e90: GetCurrentProcessId() = 0x7cc
[+] 	0x6b81df10: GetCurrentThreadId() = 0x1
[+] 	0x6b8223a0: GetTickCount() = 0x30d40
[+] 	0x6b81df40: QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0
[+] 	0x6b8218a0: GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[+] 	0x6b820a40: HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x50006d0
[+] 	0x6b820e50: GetModuleHandleW(lpModuleName = "KERNELBASE.DLL") = 0x10000000
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "FlsAlloc") = 0x10129d30
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "FlsGetValue") = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "FlsSetValue") = 0x1011c300
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "FlsFree") = 0x1012cdc0
[+] 	0x6b821140: TlsAlloc() = 0x0
[+] 	0x6b81dfb0: TlsSetValue(dwTlsIndex = 0, lpTlsValue = 0x10113c90) = 0x1
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0) = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x10252da0) = 0x10252da0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x10251f50) = 0x10251f50
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x10129d30) = 0x10129d30
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x10113c90) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x1011c300) = 0x1011c300
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x101d3572: EncodePointer(Ptr = 0x1012cdc0) = 0x1012cdc0
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d80, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268d98, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268db0, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268dc8, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268de0, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268df8, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e10, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e28, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e40, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e58, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e70, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268e88, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268ea0, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x10268eb8, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[+] 	0x101d3108: DecodePointer(Ptr = 0x10129d30) = 0x10129d30
[+] 	0x10129d30: FlsAlloc(lpCallback = 0x102519d0) = 0x0
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x214) = 0x50016d0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x0
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[+] 	0x101d3108: DecodePointer(Ptr = 0x1011c300) = 0x1011c300
[+] 	0x1011c300: FlsSetValue(dwFlsIndex = 0, lpFlsData = 0x50016d0) = 0x1
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "EncodePointer") = 0x101d3572
[+] 	0x6b81f550: GetProcAddress(hModule = 0x10000000, lpProcName = "DecodePointer") = 0x101d3108
[+] 	0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[+] 	0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x10268e58) = 0x0
[+] 	0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[+] 	0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x10268e40) = 0x0
[+] 	0x6b821ee0: GetCommandLineA() = 0x50018e4
[+] 	0x6b821ef0: GetEnvironmentStringsW() = 0x5001909
[+] 	0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x1) = 0x500190b
[+] 	0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5001909, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1
[+] 	0x6b821ba0: FreeEnvironmentStringsW(penv = 0x5001909) = 0x1
[+] 	0x6b821550: GetStartupInfoW(lpStartupInfo = 0xffffce30) = 0x0
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x480) = 0x5001928
[+] 	0x6b821700: GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6
[+] 	0x6b823390: GetFileType(hFile = 0xfffffff6) = 0x2
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001934, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b821700: GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5
[+] 	0x6b823390: GetFileType(hFile = 0xfffffff5) = 0x2
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x5001958, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b821700: GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4
[+] 	0x6b823390: GetFileType(hFile = 0xfffffff4) = 0x2
[+] 	0x6b822fe0: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x500197c, dwSpinCount = 0xfa0) = 0x1
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b8203c0: GetACP() = 0x1b5
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x220) = 0x5001da8
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b8216a0: IsValidCodePage(CodePage = 0x1b5) = 0x1
[+] 	0x6b821530: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcdf8) = 0x1
[+] 	0x6b821530: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc8bc) = 0x1
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc638, cchWideChar = 0x100) = 0x100
[+] 	0x6b820c40: GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc638, cchSrc = 0x100, lpCharType = 0xffffc8d0) = 0x1
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100
[+] 	0x6b820e70: LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[+] 	0x6b820e70: LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3b8, cchDest = 0x102) = 0x102
[+] 	0x6b81dff0: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3b8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcbd0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100
[+] 	0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffccd0, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5e8, cchWideChar = 0x100) = 0x100
[+] 	0x6b820e70: LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x102
[+] 	0x6b820e70: LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc3d8, cchDest = 0x102) = 0x102
[+] 	0x6b81dff0: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc3d8, cchWideChar = 0x102, lpMultiByteStr = 0xffffcad0, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100
[+] 	0x6b820e30: GetModuleFileNameA(hModule = 0, lpFilename = 0x10268938, nSize = 0x104) = 0x11
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x2b) = 0x5001fc8
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x6b81dfa0: SetLastError(dwErrCode = 0)
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x4) = 0x5001ff3
[+] 	0x6b81df60: HeapFree(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x500190b) = True
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025eea0) = 0x1025eea0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025ef50) = 0x1025ef50
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025efc0) = 0x1025efc0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025f060) = 0x1025f060
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025e530) = 0x1025e530
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025e560) = 0x1025e560
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025ef70) = 0x1025ef70
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025eec0) = 0x1025eec0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x1025efe0) = 0x1025efe0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0) = 0x0
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x80) = 0x5001ff7
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0x8, dwBytes = 0x800) = 0x5002077
[+] 	0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3108: DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3108: DecodePointer(Ptr = 0x5001ff7) = 0x5001ff7
[+] 	0x6b89be15: HeapSize(hHeap = 0x50006d0, dwFlags = 0, lpMem = 0x5001ff7) = 0x80
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x10263a20) = 0x10263a20
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x6b81df20: TlsGetValue(dwTlsIndex = 0) = 0x10113c90
[+] 	0x10113c90: FlsGetValue(dwFlsIndex = 0) = 0x50016d0
[+] 	0x101d3572: EncodePointer(Ptr = 0x5001ffb) = 0x5001ffb
[+] 	0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x10268e10) = 0x0
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b81f380: GetProcessHeap() = 0x5000000
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x14) = 0x5002877
[+] 	0x6b822fa0: CreateMutexW(lpMutexAttributes = 0, bInitialOwner = 0, lpName = 0) = 0x0
[+] 	0x6b821910: GetSystemInfo(lpSystemInfo = 0xffffcf74) = 0x0
[!] 	api GlobalMemoryStatus (kernel32) is not implemented
[+] 	0x4b2f8f40: memset(dest = 0xffffceb8, c = 0, count = 0x40) = 0xffffceb8
[!] 	api GlobalMemoryStatusEx (kernelbase) is not implemented
[+] 	0x4b2f2d10: ZwQuerySystemInformation(SystemInformationClass = 0xb6, SystemInformation = 0xffffce54, SystemInformationLength = 0x38, ReturnLength = 0) = 0x0
[=] 	QueryInformationProcess: no implementation for info class 0x01
[+] 	0x4b2f2b20: ZwQueryInformationProcess(ProcessHandle = 0xffffffff, ProcessInformationClass = 0x1, ProcessInformation = 0xffffce04, ProcessInformationLength = 0x20, ReturnLength = 0) = 0xc0000001
[!] 	api RtlNtStatusToDosError (ntdll) is not implemented
[!] 	api RtlSetLastWin32Error (ntdll) is not implemented
[!] 	api RtlImageNtHeader (ntdll) is not implemented
[!] 	api RtlImageNtHeaderEx (ntdll) is not implemented
[+] 	0x6b8203c0: GetACP() = 0x1b5
[+] 	0x6b821530: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf40) = 0x1
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0xcc) = 0x500288b
[+] 	0x6b81e010: GetLastError() = 0x0
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1a) = 0x5002957
[+] 	0x6b89bd75: HeapAlloc(hHeap = 0x50006d0, dwFlags = 0, dwBytes = 0x18) = 0x5002971
[+] 	0x6b89c00e: InitializeCriticalSection(lpCriticalSection = 0x5002971) = 0x1
[+] 	0x6b89c00e: InitializeCriticalSection(lpCriticalSection = 0x1026900c) = 0x1
[+] 	0x6b8218a0: GetVersionExW(lpVersionInformation = "Ĕ") = 0x1
[+] 	0x6b89c00e: InitializeCriticalSection(lpCriticalSection = 0x10268ff0) = 0x1
[=] 	Returned from mscoree.dll DllMain
[=] 	Done loading mscoree.dll
[=] 	Loading ucrtbase.dll ...
[+] 	DLL preferred base address: 0x10000000
[+] 	DLL preferred base address is taken, loading to: 0x10280000
[Init imports for ucrtbase.dll][Requesting imports from api-ms-win-core-errorhandling-l1-1-0.dll][Redirecting api-ms-win-core-errorhandling-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-l1-1-0.dll][Redirecting api-ms-win-core-heap-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll][Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-libraryloader-l1-1-0.dll][Redirecting api-ms-win-core-libraryloader-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-1-0.dll][Redirecting api-ms-win-core-synch-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-debug-l1-1-0.dll][Redirecting api-ms-win-core-debug-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processenvironment-l1-1-0.dll][Redirecting api-ms-win-core-processenvironment-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-file-l1-1-0.dll][Redirecting api-ms-win-core-file-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-string-l1-1-0.dll][Redirecting api-ms-win-core-string-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-localization-l1-2-0.dll][Redirecting api-ms-win-core-localization-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-datetime-l1-1-0.dll][Redirecting api-ms-win-core-datetime-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll][Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-1.dll][Redirecting api-ms-win-core-processthreads-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-core-console-l1-1-0.dll][Redirecting api-ms-win-core-console-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-handle-l1-1-0.dll][Redirecting api-ms-win-core-handle-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-file-l1-2-0.dll][Redirecting api-ms-win-core-file-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-namedpipe-l1-1-0.dll][Redirecting api-ms-win-core-namedpipe-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-timezone-l1-1-0.dll][Redirecting api-ms-win-core-timezone-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-file-l2-1-0.dll][Redirecting api-ms-win-core-file-l2-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-2-0.dll][Redirecting api-ms-win-core-synch-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-profile-l1-1-0.dll][Redirecting api-ms-win-core-profile-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-memory-l1-1-0.dll][Redirecting api-ms-win-core-memory-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-util-l1-1-0.dll][Redirecting api-ms-win-core-util-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-rtlsupport-l1-1-0.dll][Redirecting api-ms-win-core-rtlsupport-l1-1-0.dll to ntdll.dll][Requesting imports from api-ms-win-core-interlocked-l1-1-0.dll][Redirecting api-ms-win-core-interlocked-l1-1-0.dll to kernelbase.dll][Calling ucrtbase.dll DllMain at 0x102aba30][0x1011c170: GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd0)][0x101bae30: GetCurrentThreadId() = 0x1][0x1011bc10: GetCurrentProcessId() = 0x7cc][0x101d8ca0: QueryPerformanceCounter(lpPerformanceCount = 0xffffcfc8) = 0x0][0x10127c80: IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][Refusing to load virtual DLL api-ms-win-core-synch-l1-2-0.dll][0x101113d0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][0x10111ff0: GetLastError() = 0x0][0x101113d0: LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10390ec8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][Refusing to load virtual DLL api-ms-win-core-fibers-l1-1-1.dll][0x101113d0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][0x10111ff0: GetLastError() = 0x0][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][0x6b821e20: FlsAlloc(lpCallback = 0x102e1070) = 0x1][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x1, lpFlsData = 0x10390ea0) = 0x1][0x10127c80: IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][Refusing to load virtual DLL api-ms-win-core-fibers-l1-1-1.dll][0x101113d0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][0x10111ff0: GetLastError() = 0x0][0x101113d0: LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][0x6b821e20: FlsAlloc(lpCallback = 0) = 0x2][Refusing to load virtual DLL api-ms-win-core-synch-l1-2-0.dll][0x101113d0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][0x10111ff0: GetLastError() = 0x0][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a18, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a30, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a48, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a60, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a78, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391a90, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391aa8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391ac0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391ad8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10391b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x1011e450: GetProcessHeap() = 0x5000000][0x6b821e20: FlsAlloc(lpCallback = 0x102c2cd0) = 0x3][0x10111ff0: GetLastError() = 0x0][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][0x6b81e770: FlsGetValue(dwFlsIndex = 0x3) = 0x0][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0xffffffff) = 0x1][0x102b1990: _calloc_base(num = 0x2, size = 0x364) = 0x5002a81][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x3, lpFlsData = 0x5002a81) = 0x1][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a78) = 0x0][0x102b3c80: _free_base(address = 0)][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][0x102b1990: _calloc_base(num = 0x40, size = 0x38) = 0x5003149][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003149, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003181, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50031b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50031f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003229, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003261, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003299, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50032d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003309, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003341, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003379, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50033b1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50033e9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003421, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003459, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003491, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50034c9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003501, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003539, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003571, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50035a9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50035e1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003619, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003651, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003689, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50036c1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50036f9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003731, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003769, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50037a1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50037d9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003811, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003849, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003881, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50038b9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50038f1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003929, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003961, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003999, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50039d1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003a09, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003a41, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003a79, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ab1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ae9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003b21, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003b59, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003b91, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003bc9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003c01, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003c39, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003c71, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ca9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ce1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003d19, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003d51, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003d89, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003dc1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003df9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003e31, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003e69, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ea1, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003ed9, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5003f11, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x102b3c80: _free_base(address = 0)][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][0x10128ef0: GetStartupInfoW(lpStartupInfo = 0xffffcf40) = 0x0][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][0x10125690: GetFileType(hFile = 0xfffffff6) = 0x2][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][0x10125690: GetFileType(hFile = 0xfffffff5) = 0x2][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][0x10125690: GetFileType(hFile = 0xfffffff4) = 0x2][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391ac0) = 0x0][0x1012cd20: GetCommandLineA() = 0x5003f65][0x1012ccd0: GetCommandLineW() = 0x5003f8a][0x6b81e770: FlsGetValue(dwFlsIndex = 0x3) = 0x5002a81][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x10125da0: GetACP() = 0x1b5][0x102b0140: _malloc_base(size = 0x220) = 0x5003fd2][0x10115f40: IsValidCodePage(CodePage = 0x1b5) = 0x1][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][0x102de9b0: memset(dest = 0x5003fea, c = 0, count = 0x101) = 0x5003fea][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x102de9b0: memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][0x101138f0: GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][0x102cd3c0: __strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][Refusing to load virtual DLL api-ms-win-core-localization-l1-2-1.dll][0x101113d0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][0x10111ff0: GetLastError() = 0x0][0x10118e30: GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x102cd3c0: __strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 㿪Ԁ㿒Ԁ㿒Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x10111ff0: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x102dfc40: memcpy(dest = 0x103907f0, src = 0x5003fea, count = 0x101) = 0x103907f0][0x10111ff0: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x102dfc40: memcpy(dest = 0x103905f0, src = 0x50040eb, count = 0x100) = 0x103905f0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x102b3c80: _free_base(address = 0)][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x10125da0: GetACP() = 0x1b5][0x102b0140: _malloc_base(size = 0x220) = 0x50041f2][0x10115f40: IsValidCodePage(CodePage = 0x1b5) = 0x1][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf50) = 0x1][0x102de9b0: memset(dest = 0x500420a, c = 0, count = 0x101) = 0x500420a][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc814) = 0x1][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x102de9b0: memset(dest = 0xffffc5c8, c = 0, count = 0x200) = 0xffffc5c8][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc5c8, cchWideChar = 0x100) = 0x100][0x101138f0: GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc5c8, cchSrc = 0x100, lpCharType = 0xffffcb28) = 0x1][0x102cd3c0: __strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffc928, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x102cd3c0: __strncnt(str = 0xffffc828, maxsize = 0x100) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffc828, cbMultiByte = 0x100, lpWideCharStr = 0xffffc588, cchWideChar = 0x100) = 0x100][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ 䈊Ԁ䇲Ԁ䇲Ԁ", cchSrc = 0x100, lpDestStr = 0xffffc368, cchDest = 0x107, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x107][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc368, cchWideChar = 0x107, lpMultiByteStr = 0xffffca28, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x10111ff0: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x102dfc40: memcpy(dest = 0x103907f0, src = 0x500420a, count = 0x101) = 0x103907f0][0x10111ff0: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x102dfc40: memcpy(dest = 0x103905f0, src = 0x500430b, count = 0x100) = 0x103905f0][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x10391a90) = 0x0][0x102b3c80: _free_base(address = 0)][0x10111ff0: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x2) = 0x0][0x101da34e: SetLastError(dwErrCode = 0)][0x1011e460: GetEnvironmentStringsW() = 0x5004412][0x10114250: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x102b0140: _malloc_base(size = 0x1) = 0x500190b][0x10114250: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5004412, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x102b3c80: _free_base(address = 0)][0x1012a0e0: FreeEnvironmentStringsW(penv = 0x5004412) = 0x1][0x102b1990: _calloc_base(num = 0x1, size = 0x4) = 0x5004414][0x102b3c80: _free_base(address = 0)][0x102b3c80: _free_base(address = 0)][0x102b3c80: _free_base(address = 0x500190b)][api _initialize_onexit_table (ucrtbase) is not implemented][api _initialize_onexit_table (ucrtbase) is not implemented][0x101d8cdb: QueryPerformanceFrequency(lpFrequency = 0xffffcfa4) = 0x1][0x101d8ca0: QueryPerformanceCounter(lpPerformanceCount = 0xffffcf9c) = 0x0][0x10127c80: IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][0x102b1990: _calloc_base(num = 0x200, size = 0x4) = 0x5004418][0x102b3c80: _free_base(address = 0)][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10390310, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10390348, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x10390380, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x102aac10: _initterm(pfbegin = 0x10283918, pfend = 0x1028391c) = 0x0][Returned from ucrtbase.dll DllMain][Done loading ucrtbase.dll][Init imports for D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][Requesting imports from kernel32.dll][Requesting imports from advapi32.dll][Loading advapi32.dll ...][DLL preferred base address: 0x4c300000][Init imports for advapi32.dll][Requesting imports from msvcrt.dll][Loading msvcrt.dll ...][DLL preferred base address: 0x10100000][DLL preferred base address is taken, loading to: 0x103a0000][Init imports for msvcrt.dll][Requesting imports from ntdll.dll][Requesting imports from api-ms-win-core-console-l1-1-0.dll][Redirecting api-ms-win-core-console-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-console-l1-2-0.dll][Redirecting api-ms-win-core-console-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-datetime-l1-1-0.dll][Redirecting api-ms-win-core-datetime-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-debug-l1-1-0.dll][Redirecting api-ms-win-core-debug-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-errorhandling-l1-1-0.dll][Redirecting api-ms-win-core-errorhandling-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-fibers-l1-1-0.dll][Redirecting api-ms-win-core-fibers-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-file-l1-1-0.dll][Redirecting api-ms-win-core-file-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-handle-l1-1-0.dll][Redirecting api-ms-win-core-handle-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-l1-1-0.dll][Redirecting api-ms-win-core-heap-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-localization-l1-2-0.dll][Redirecting api-ms-win-core-localization-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-libraryloader-l1-2-0.dll][Redirecting api-ms-win-core-libraryloader-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-memory-l1-1-0.dll][Redirecting api-ms-win-core-memory-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-namedpipe-l1-1-0.dll][Redirecting api-ms-win-core-namedpipe-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processenvironment-l1-1-0.dll][Redirecting api-ms-win-core-processenvironment-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll][Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-profile-l1-1-0.dll][Redirecting api-ms-win-core-profile-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-string-l1-1-0.dll][Redirecting api-ms-win-core-string-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-1-0.dll][Redirecting api-ms-win-core-synch-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-2-0.dll][Redirecting api-ms-win-core-synch-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll][Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-util-l1-1-0.dll][Redirecting api-ms-win-core-util-l1-1-0.dll to kernelbase.dll][Requesting imports from kernelbase.dll][Calling msvcrt.dll DllMain at 0x103d5ac0][0x1011c170: GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfd8)][0x1011bc10: GetCurrentProcessId() = 0x7cc][0x101bae30: GetCurrentThreadId() = 0x1][0x1011afd0: GetTickCount() = 0x30d40][0x101d8ca0: QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe0) = 0x0][0x1010feb0: GetModuleHandleW(lpModuleName = 0) = 0x400000][0x10115c00: GetVersionExW(lpVersionInformation = "Ĕ") = 0x1][0x10125780: HeapCreate(flOptions = 0, dwInitialSize = 0x1000, dwMaximumSize = 0) = 0x5004e6c][0x101d3572: EncodePointer(Ptr = 0) = 0x0][api _CrtSetDbgBlockType (msvcrt) is not implemented][0x101d3572: EncodePointer(Ptr = 0x103da620) = 0x103da620][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104541cc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x10454204, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x1045423c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x10454274, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104542ac, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104542e4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x1045431c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x10454354, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x1045438c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104543c4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104543fc, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x10454434, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x1045446c, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x104544a4, dwSpinCount = 0xfa0, Flags = 0x4000000) = 0x1][0x10129d30: FlsAlloc(lpCallback = 0x10406700) = 0x4][0x101d66aa: HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x214) = 0x5005e6c][0x1011c300: FlsSetValue(dwFlsIndex = 0x4, lpFlsData = 0x5005e6c) = 0x1][api _lock (msvcrt) is not implemented][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _lock (msvcrt) is not implemented][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][api _unlock (msvcrt) is not implemented][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x1045438c) = 0x0][0x1010feb0: GetModuleHandleW(lpModuleName = 0) = 0x400000][0x10128ef0: GetStartupInfoW(lpStartupInfo = 0xffffcf98) = 0x0][0x101d66aa: HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x480) = 0x500609c][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][0x10125690: GetFileType(hFile = 0xfffffff6) = 0x2][0x10125b70: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060a8, dwSpinCount = 0xfa0) = 0x1][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][0x10125690: GetFileType(hFile = 0xfffffff5) = 0x2][0x10125b70: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060cc, dwSpinCount = 0xfa0) = 0x1][0x10128a40: GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][0x10125690: GetFileType(hFile = 0xfffffff4) = 0x2][0x10125b70: InitializeCriticalSectionAndSpinCount(lpCriticalSection = 0x50060f0, dwSpinCount = 0xfa0) = 0x1][0x1011e460: GetEnvironmentStringsW() = 0x500651c][0x10114250: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x103e74f0: malloc(size = 0x1) = 0x500190b][0x10114250: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x500651c, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x1012a0e0: FreeEnvironmentStringsW(penv = 0x500651c) = 0x1][0x1012cd20: GetCommandLineA() = 0x500651e][0x1012ccd0: GetCommandLineW() = 0x5006543][api _setmbcp (msvcrt) is not implemented][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][api _lock (msvcrt) is not implemented][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x10125da0: GetACP() = 0x1b5][0x103e74f0: malloc(size = 0x220) = 0x500658b][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x10115f40: IsValidCodePage(CodePage = 0x1b5) = 0x1][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcf84) = 0x1][0x104294d0: memset(dest = 0x50065a7, c = 0, count = 0x101) = 0x50065a7][0x10123fe0: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffca48) = 0x1][0x104294d0: memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][0x104294d0: memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][0x104294d0: memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][0x104294d0: memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][0x104294d0: memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][0x104294d0: memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][0x104294d0: memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][0x104294d0: memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][0x104294d0: memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][0x104294d0: memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][0x104294d0: memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][0x104294d0: memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][0x104294d0: memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][0x104294d0: memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][0x104294d0: memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][0x104294d0: memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][0x104294d0: memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][0x104294d0: memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][0x104294d0: memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][0x104294d0: memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][0x104294d0: memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][0x104294d0: memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][0x104294d0: memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][0x104294d0: memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][0x104294d0: memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][0x104294d0: memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][0x104294d0: memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][0x104294d0: memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][0x104294d0: memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][0x104294d0: memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][0x104294d0: memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][0x104294d0: memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][0x104294d0: memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][0x104294d0: memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][0x104294d0: memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][0x104294d0: memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][0x104294d0: memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][0x104294d0: memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][0x104294d0: memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][0x104294d0: memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][0x104294d0: memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][0x104294d0: memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][0x104294d0: memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][0x104294d0: memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][0x104294d0: memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][0x104294d0: memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][0x104294d0: memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][0x104294d0: memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][0x104294d0: memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][0x104294d0: memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][0x104294d0: memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][0x104294d0: memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][0x104294d0: memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][0x104294d0: memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][0x104294d0: memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][0x104294d0: memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][0x104294d0: memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][0x104294d0: memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][0x104294d0: memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][0x104294d0: memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][0x104294d0: memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][0x104294d0: memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][0x104294d0: memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][0x104294d0: memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][0x104294d0: memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][0x104294d0: memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][0x104294d0: memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][0x104294d0: memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][0x104294d0: memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][0x104294d0: memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][0x104294d0: memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][0x104294d0: memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][0x104294d0: memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][0x104294d0: memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][0x104294d0: memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][0x104294d0: memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][0x104294d0: memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][0x104294d0: memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][0x104294d0: memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][0x104294d0: memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][0x104294d0: memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][0x104294d0: memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][0x104294d0: memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][0x104294d0: memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][0x104294d0: memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][0x104294d0: memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][0x104294d0: memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][0x104294d0: memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][0x104294d0: memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][0x104294d0: memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][0x104294d0: memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][0x104294d0: memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][0x104294d0: memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][0x104294d0: memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][0x104294d0: memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][0x104294d0: memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][0x104294d0: memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][0x104294d0: memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][0x104294d0: memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][0x104294d0: memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][0x104294d0: memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][0x104294d0: memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][0x104294d0: memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][0x104294d0: memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][0x104294d0: memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][0x104294d0: memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][0x104294d0: memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][0x104294d0: memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][0x104294d0: memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][0x104294d0: memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][0x104294d0: memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][0x104294d0: memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][0x104294d0: memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][0x104294d0: memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][0x104294d0: memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][0x104294d0: memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][0x104294d0: memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][0x104294d0: memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][0x104294d0: memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][0x104294d0: memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][0x104294d0: memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][0x104294d0: memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][0x104294d0: memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][0x104294d0: memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][0x104294d0: memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][0x104294d0: memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][0x104294d0: memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][0x104294d0: memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][0x104294d0: memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][0x104294d0: memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][0x104294d0: memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][0x104294d0: memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][0x104294d0: memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][0x104294d0: memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][0x104294d0: memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][0x104294d0: memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][0x104294d0: memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][0x104294d0: memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][0x104294d0: memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][0x104294d0: memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][0x104294d0: memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][0x104294d0: memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][0x104294d0: memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][0x104294d0: memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][0x104294d0: memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][0x104294d0: memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][0x104294d0: memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][0x104294d0: memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][0x104294d0: memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][0x104294d0: memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][0x104294d0: memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][0x104294d0: memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][0x104294d0: memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][0x104294d0: memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][0x104294d0: memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][0x104294d0: memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][0x104294d0: memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][0x104294d0: memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][0x104294d0: memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][0x104294d0: memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][0x104294d0: memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][0x104294d0: memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][0x104294d0: memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][0x104294d0: memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][0x104294d0: memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][0x104294d0: memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][0x104294d0: memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][0x104294d0: memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][0x104294d0: memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][0x104294d0: memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][0x104294d0: memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][0x104294d0: memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][0x104294d0: memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][0x104294d0: memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][0x104294d0: memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][0x104294d0: memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][0x104294d0: memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][0x104294d0: memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][0x104294d0: memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][0x104294d0: memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][0x104294d0: memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][0x104294d0: memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][0x104294d0: memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][0x104294d0: memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][0x104294d0: memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][0x104294d0: memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][0x104294d0: memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][0x104294d0: memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][0x104294d0: memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][0x104294d0: memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][0x104294d0: memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][0x104294d0: memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][0x104294d0: memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][0x104294d0: memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][0x104294d0: memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][0x104294d0: memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][0x104294d0: memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][0x104294d0: memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][0x104294d0: memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][0x104294d0: memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][0x104294d0: memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][0x104294d0: memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][0x104294d0: memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][0x104294d0: memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][0x104294d0: memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][0x104294d0: memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][0x104294d0: memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][0x104294d0: memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][0x104294d0: memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][0x104294d0: memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][0x104294d0: memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][0x104294d0: memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][0x104294d0: memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][0x104294d0: memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][0x104294d0: memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][0x104294d0: memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][0x104294d0: memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][0x104294d0: memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][0x104294d0: memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][0x104294d0: memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][0x104294d0: memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][0x104294d0: memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][0x104294d0: memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][0x104294d0: memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][0x104294d0: memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][0x104294d0: memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][0x104294d0: memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][0x104294d0: memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][0x104294d0: memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][0x104294d0: memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][0x104294d0: memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][0x104294d0: memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][0x104294d0: memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][0x104294d0: memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][0x104294d0: memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][0x104294d0: memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][0x104294d0: memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][0x104294d0: memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][0x104294d0: memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][0x104294d0: memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][0x104294d0: memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][0x104294d0: memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][0x104294d0: memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][0x104294d0: memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][0x104294d0: memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][0x104294d0: memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][0x104294d0: memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][0x104294d0: memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][0x104294d0: memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][0x104294d0: memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][0x104294d0: memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][0x104294d0: memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][0x104294d0: memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][0x104294d0: memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][0x104294d0: memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][0x104294d0: memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][0x104294d0: memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][0x104294d0: memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][0x104294d0: memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][0x104294d0: memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][0x104294d0: memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][0x104294d0: memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][0x104294d0: memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][0x104294d0: memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][0x104294d0: memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][0x104294d0: memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][0x104294d0: memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][0x104294d0: memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][0x104294d0: memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][0x104294d0: memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][0x104294d0: memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][0x104294d0: memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][0x104294d0: memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][0x104294d0: memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][0x104294d0: memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][0x104294d0: memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][0x104294d0: memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][0x104294d0: memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][0x104294d0: memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][0x104294d0: memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][0x104294d0: memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][0x104294d0: memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][0x104294d0: memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][0x104294d0: memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][0x104294d0: memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][0x104294d0: memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][0x104294d0: memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][0x104294d0: memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][0x104294d0: memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][0x104294d0: memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][0x104294d0: memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][0x104294d0: memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][0x104294d0: memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][0x104294d0: memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][0x104294d0: memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][0x104294d0: memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][0x104294d0: memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][0x104294d0: memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][0x104294d0: memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][0x104294d0: memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][0x104294d0: memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][0x104294d0: memset(dest = 0xffffcf38, c = 0x20, count = 0x2) = 0xffffcf38][0x104294d0: memset(dest = 0xffffcf3a, c = 0x20, count = 0x2) = 0xffffcf3a][0x104294d0: memset(dest = 0xffffcf3c, c = 0x20, count = 0x2) = 0xffffcf3c][0x104294d0: memset(dest = 0xffffcf3e, c = 0x20, count = 0x2) = 0xffffcf3e][0x104294d0: memset(dest = 0xffffcf40, c = 0x20, count = 0x2) = 0xffffcf40][0x104294d0: memset(dest = 0xffffcf42, c = 0x20, count = 0x2) = 0xffffcf42][0x104294d0: memset(dest = 0xffffcf44, c = 0x20, count = 0x2) = 0xffffcf44][0x104294d0: memset(dest = 0xffffcf46, c = 0x20, count = 0x2) = 0xffffcf46][0x104294d0: memset(dest = 0xffffcf48, c = 0x20, count = 0x2) = 0xffffcf48][0x104294d0: memset(dest = 0xffffcf4a, c = 0x20, count = 0x2) = 0xffffcf4a][0x104294d0: memset(dest = 0xffffcf4c, c = 0x20, count = 0x2) = 0xffffcf4c][0x104294d0: memset(dest = 0xffffcf4e, c = 0x20, count = 0x2) = 0xffffcf4e][0x104294d0: memset(dest = 0xffffcf50, c = 0x20, count = 0x2) = 0xffffcf50][0x104294d0: memset(dest = 0xffffcf52, c = 0x20, count = 0x2) = 0xffffcf52][0x104294d0: memset(dest = 0xffffcf54, c = 0x20, count = 0x2) = 0xffffcf54][0x104294d0: memset(dest = 0xffffcf56, c = 0x20, count = 0x2) = 0xffffcf56][0x104294d0: memset(dest = 0xffffcf58, c = 0x20, count = 0x2) = 0xffffcf58][0x104294d0: memset(dest = 0xffffcf5a, c = 0x20, count = 0x2) = 0xffffcf5a][0x104294d0: memset(dest = 0xffffce5e, c = 0x20, count = 0x2) = 0xffffce5e][0x104294d0: memset(dest = 0xffffce60, c = 0x20, count = 0x2) = 0xffffce60][0x104294d0: memset(dest = 0xffffce62, c = 0x20, count = 0x2) = 0xffffce62][0x104294d0: memset(dest = 0xffffce64, c = 0x20, count = 0x2) = 0xffffce64][0x104294d0: memset(dest = 0xffffce66, c = 0x20, count = 0x2) = 0xffffce66][0x104294d0: memset(dest = 0xffffce68, c = 0x20, count = 0x2) = 0xffffce68][0x104294d0: memset(dest = 0xffffce6a, c = 0x20, count = 0x2) = 0xffffce6a][0x104294d0: memset(dest = 0xffffce6c, c = 0x20, count = 0x2) = 0xffffce6c][0x104294d0: memset(dest = 0xffffce6e, c = 0x20, count = 0x2) = 0xffffce6e][0x104294d0: memset(dest = 0xffffce70, c = 0x20, count = 0x2) = 0xffffce70][0x104294d0: memset(dest = 0xffffce72, c = 0x20, count = 0x2) = 0xffffce72][0x104294d0: memset(dest = 0xffffce74, c = 0x20, count = 0x2) = 0xffffce74][0x104294d0: memset(dest = 0xffffce76, c = 0x20, count = 0x2) = 0xffffce76][0x104294d0: memset(dest = 0xffffce78, c = 0x20, count = 0x2) = 0xffffce78][0x104294d0: memset(dest = 0xffffce7a, c = 0x20, count = 0x2) = 0xffffce7a][0x104294d0: memset(dest = 0xffffce7c, c = 0x20, count = 0x2) = 0xffffce7c][0x104294d0: memset(dest = 0xffffce7e, c = 0x20, count = 0x2) = 0xffffce7e][0x104294d0: memset(dest = 0xffffce80, c = 0x20, count = 0x2) = 0xffffce80][0x104294d0: memset(dest = 0xffffce82, c = 0x20, count = 0x2) = 0xffffce82][0x104294d0: memset(dest = 0xffffce84, c = 0x20, count = 0x2) = 0xffffce84][0x104294d0: memset(dest = 0xffffce86, c = 0x20, count = 0x2) = 0xffffce86][0x104294d0: memset(dest = 0xffffce88, c = 0x20, count = 0x2) = 0xffffce88][0x104294d0: memset(dest = 0xffffce8a, c = 0x20, count = 0x2) = 0xffffce8a][0x104294d0: memset(dest = 0xffffce8c, c = 0x20, count = 0x2) = 0xffffce8c][0x104294d0: memset(dest = 0xffffce8e, c = 0x20, count = 0x2) = 0xffffce8e][0x104294d0: memset(dest = 0xffffce90, c = 0x20, count = 0x2) = 0xffffce90][0x104294d0: memset(dest = 0xffffce92, c = 0x20, count = 0x2) = 0xffffce92][0x104294d0: memset(dest = 0xffffce94, c = 0x20, count = 0x2) = 0xffffce94][0x104294d0: memset(dest = 0xffffce96, c = 0x20, count = 0x2) = 0xffffce96][0x104294d0: memset(dest = 0xffffce98, c = 0x20, count = 0x2) = 0xffffce98][0x104294d0: memset(dest = 0xffffce9a, c = 0x20, count = 0x2) = 0xffffce9a][0x104294d0: memset(dest = 0xffffce9c, c = 0x20, count = 0x2) = 0xffffce9c][0x104294d0: memset(dest = 0xffffce9e, c = 0x20, count = 0x2) = 0xffffce9e][0x104294d0: memset(dest = 0xffffcea0, c = 0x20, count = 0x2) = 0xffffcea0][0x104294d0: memset(dest = 0xffffcea2, c = 0x20, count = 0x2) = 0xffffcea2][0x104294d0: memset(dest = 0xffffcea4, c = 0x20, count = 0x2) = 0xffffcea4][0x104294d0: memset(dest = 0xffffcea6, c = 0x20, count = 0x2) = 0xffffcea6][0x104294d0: memset(dest = 0xffffcea8, c = 0x20, count = 0x2) = 0xffffcea8][0x104294d0: memset(dest = 0xffffceaa, c = 0x20, count = 0x2) = 0xffffceaa][0x104294d0: memset(dest = 0xffffceac, c = 0x20, count = 0x2) = 0xffffceac][0x104294d0: memset(dest = 0xffffceae, c = 0x20, count = 0x2) = 0xffffceae][0x104294d0: memset(dest = 0xffffceb0, c = 0x20, count = 0x2) = 0xffffceb0][0x104294d0: memset(dest = 0xffffceb2, c = 0x20, count = 0x2) = 0xffffceb2][0x104294d0: memset(dest = 0xffffceb4, c = 0x20, count = 0x2) = 0xffffceb4][0x104294d0: memset(dest = 0xffffceb6, c = 0x20, count = 0x2) = 0xffffceb6][0x104294d0: memset(dest = 0xffffceb8, c = 0x20, count = 0x2) = 0xffffceb8][0x104294d0: memset(dest = 0xffffceba, c = 0x20, count = 0x2) = 0xffffceba][0x104294d0: memset(dest = 0xffffcebc, c = 0x20, count = 0x2) = 0xffffcebc][0x104294d0: memset(dest = 0xffffcebe, c = 0x20, count = 0x2) = 0xffffcebe][0x104294d0: memset(dest = 0xffffcec0, c = 0x20, count = 0x2) = 0xffffcec0][0x104294d0: memset(dest = 0xffffcec2, c = 0x20, count = 0x2) = 0xffffcec2][0x104294d0: memset(dest = 0xffffcec4, c = 0x20, count = 0x2) = 0xffffcec4][0x104294d0: memset(dest = 0xffffcec6, c = 0x20, count = 0x2) = 0xffffcec6][0x104294d0: memset(dest = 0xffffcec8, c = 0x20, count = 0x2) = 0xffffcec8][0x104294d0: memset(dest = 0xffffceca, c = 0x20, count = 0x2) = 0xffffceca][0x104294d0: memset(dest = 0xffffcecc, c = 0x20, count = 0x2) = 0xffffcecc][0x104294d0: memset(dest = 0xffffcece, c = 0x20, count = 0x2) = 0xffffcece][0x104294d0: memset(dest = 0xffffced0, c = 0x20, count = 0x2) = 0xffffced0][0x104294d0: memset(dest = 0xffffced2, c = 0x20, count = 0x2) = 0xffffced2][0x104294d0: memset(dest = 0xffffced4, c = 0x20, count = 0x2) = 0xffffced4][0x104294d0: memset(dest = 0xffffced6, c = 0x20, count = 0x2) = 0xffffced6][0x104294d0: memset(dest = 0xffffced8, c = 0x20, count = 0x2) = 0xffffced8][0x104294d0: memset(dest = 0xffffceda, c = 0x20, count = 0x2) = 0xffffceda][0x104294d0: memset(dest = 0xffffcedc, c = 0x20, count = 0x2) = 0xffffcedc][0x104294d0: memset(dest = 0xffffcede, c = 0x20, count = 0x2) = 0xffffcede][0x104294d0: memset(dest = 0xffffcee0, c = 0x20, count = 0x2) = 0xffffcee0][0x104294d0: memset(dest = 0xffffcee2, c = 0x20, count = 0x2) = 0xffffcee2][0x104294d0: memset(dest = 0xffffcee4, c = 0x20, count = 0x2) = 0xffffcee4][0x104294d0: memset(dest = 0xffffcee6, c = 0x20, count = 0x2) = 0xffffcee6][0x104294d0: memset(dest = 0xffffcee8, c = 0x20, count = 0x2) = 0xffffcee8][0x104294d0: memset(dest = 0xffffceea, c = 0x20, count = 0x2) = 0xffffceea][0x104294d0: memset(dest = 0xffffceec, c = 0x20, count = 0x2) = 0xffffceec][0x104294d0: memset(dest = 0xffffceee, c = 0x20, count = 0x2) = 0xffffceee][0x104294d0: memset(dest = 0xffffcef0, c = 0x20, count = 0x2) = 0xffffcef0][0x104294d0: memset(dest = 0xffffcef2, c = 0x20, count = 0x2) = 0xffffcef2][0x104294d0: memset(dest = 0xffffcef4, c = 0x20, count = 0x2) = 0xffffcef4][0x104294d0: memset(dest = 0xffffcef6, c = 0x20, count = 0x2) = 0xffffcef6][0x104294d0: memset(dest = 0xffffcef8, c = 0x20, count = 0x2) = 0xffffcef8][0x104294d0: memset(dest = 0xffffcefa, c = 0x20, count = 0x2) = 0xffffcefa][0x104294d0: memset(dest = 0xffffcefc, c = 0x20, count = 0x2) = 0xffffcefc][0x104294d0: memset(dest = 0xffffcefe, c = 0x20, count = 0x2) = 0xffffcefe][0x104294d0: memset(dest = 0xffffcf00, c = 0x20, count = 0x2) = 0xffffcf00][0x104294d0: memset(dest = 0xffffcf02, c = 0x20, count = 0x2) = 0xffffcf02][0x104294d0: memset(dest = 0xffffcf04, c = 0x20, count = 0x2) = 0xffffcf04][0x104294d0: memset(dest = 0xffffcf06, c = 0x20, count = 0x2) = 0xffffcf06][0x104294d0: memset(dest = 0xffffcf08, c = 0x20, count = 0x2) = 0xffffcf08][0x104294d0: memset(dest = 0xffffcf0a, c = 0x20, count = 0x2) = 0xffffcf0a][0x104294d0: memset(dest = 0xffffcf0c, c = 0x20, count = 0x2) = 0xffffcf0c][0x104294d0: memset(dest = 0xffffcf0e, c = 0x20, count = 0x2) = 0xffffcf0e][0x104294d0: memset(dest = 0xffffcf10, c = 0x20, count = 0x2) = 0xffffcf10][0x104294d0: memset(dest = 0xffffcf12, c = 0x20, count = 0x2) = 0xffffcf12][0x104294d0: memset(dest = 0xffffcf14, c = 0x20, count = 0x2) = 0xffffcf14][0x104294d0: memset(dest = 0xffffcf16, c = 0x20, count = 0x2) = 0xffffcf16][0x104294d0: memset(dest = 0xffffcf18, c = 0x20, count = 0x2) = 0xffffcf18][0x104294d0: memset(dest = 0xffffcf1a, c = 0x20, count = 0x2) = 0xffffcf1a][0x104294d0: memset(dest = 0xffffcf1c, c = 0x20, count = 0x2) = 0xffffcf1c][0x104294d0: memset(dest = 0xffffcf1e, c = 0x20, count = 0x2) = 0xffffcf1e][0x104294d0: memset(dest = 0xffffcf20, c = 0x20, count = 0x2) = 0xffffcf20][0x104294d0: memset(dest = 0xffffcf22, c = 0x20, count = 0x2) = 0xffffcf22][0x104294d0: memset(dest = 0xffffcf24, c = 0x20, count = 0x2) = 0xffffcf24][0x104294d0: memset(dest = 0xffffcf26, c = 0x20, count = 0x2) = 0xffffcf26][0x104294d0: memset(dest = 0xffffcf28, c = 0x20, count = 0x2) = 0xffffcf28][0x104294d0: memset(dest = 0xffffcf2a, c = 0x20, count = 0x2) = 0xffffcf2a][0x104294d0: memset(dest = 0xffffcf2c, c = 0x20, count = 0x2) = 0xffffcf2c][0x104294d0: memset(dest = 0xffffcf2e, c = 0x20, count = 0x2) = 0xffffcf2e][0x104294d0: memset(dest = 0xffffcf30, c = 0x20, count = 0x2) = 0xffffcf30][0x104294d0: memset(dest = 0xffffcf32, c = 0x20, count = 0x2) = 0xffffcf32][0x104294d0: memset(dest = 0xffffcf34, c = 0x20, count = 0x2) = 0xffffcf34][0x104294d0: memset(dest = 0xffffcf36, c = 0x20, count = 0x2) = 0xffffcf36][0x104294d0: memset(dest = 0xffffcf14, c = 0x20, count = 0x17) = 0xffffcf14][0x104294d0: memset(dest = 0xffffcf5b, c = 0x20, count = 0x1) = 0xffffcf5b][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x104294d0: memset(dest = 0xffffc7c8, c = 0, count = 0x200) = 0xffffc7c8][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc7c8, cchWideChar = 0x100) = 0x100][0x101138f0: GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc7c8, cchSrc = 0x100, lpCharType = 0xffffca5c) = 0x1][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc758, cchWideChar = 0x100) = 0x100][0x10109680: LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿᵖ\\xf6\\xdfĀ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x10d][0x10109680: LCMapStringW(Locale = 0, dwMapFlags = 0x100, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿᵖ\\xf6\\xdfĀ", cchSrc = 0x100, lpDestStr = 0xffffc528, cchDest = 0x10d) = 0x10d][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc528, cchWideChar = 0x10d, lpMultiByteStr = 0xffffcd5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api __crtLCMapStringA (msvcrt) is not implemented][0x10111ff0: GetLastError() = 0x0][0x10113c90: FlsGetValue(dwFlsIndex = 0x4) = 0x5005e6c][0x101da34e: SetLastError(dwErrCode = 0)][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x1010c140: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffce5c, cbMultiByte = 0x100, lpWideCharStr = 0xffffc778, cchWideChar = 0x100) = 0x100][0x10109680: LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿᴶ\\xf6\\xdfĀ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0) = 0x10d][0x10109680: LCMapStringW(Locale = 0, dwMapFlags = 0x200, lpSrcStr = " \x01                                                                                                                                                                                                                                                              槰ဿᴶ\\xf6\\xdfĀ", cchSrc = 0x100, lpDestStr = 0xffffc548, cchDest = 0x10d) = 0x10d][0x10114250: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc548, cchWideChar = 0x10d, lpMultiByteStr = 0xffffcc5c, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][api _freea_s (msvcrt) is not implemented][api _freea_s (msvcrt) is not implemented][api _lock (msvcrt) is not implemented][0x101d3623: EnterCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][api _unlock (msvcrt) is not implemented][0x101d74a9: LeaveCriticalSection(lpCriticalSection = 0x104543c4) = 0x0][0x101d66aa: HeapAlloc(hHeap = 0x5004e6c, dwFlags = 0x8, dwBytes = 0x4) = 0x50067ab][0x103e7310: free(address = 0x500190b)][0x104064b0: _initterm_e(pfbegin = 0x103a1ed4, pfend = 0x103a1ee8) = 0x0][0x10406460: _initterm(pfbegin = 0x103a1ec8, pfend = 0x103a1ed0) = 0x0][Returned from msvcrt.dll DllMain][Done loading msvcrt.dll][Requesting imports from ntdll.dll][Requesting imports from api-ms-win-eventing-controller-l1-1-0.dll][Failed to resolve api-ms-win-eventing-controller-l1-1-0.dll][Requesting imports from api-ms-win-eventing-consumer-l1-1-0.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-0.dll][Requesting imports from api-ms-win-eventing-consumer-l1-1-1.dll][Failed to resolve api-ms-win-eventing-consumer-l1-1-1.dll][Requesting imports from kernelbase.dll][Requesting imports from sechost.dll][Loading sechost.dll ...][DLL preferred base address: 0x10000000][DLL preferred base address is taken, loading to: 0x10460000][Init imports for sechost.dll][Requesting imports from api-ms-win-core-crt-l1-1-0.dll][Redirecting api-ms-win-core-crt-l1-1-0.dll to ntdll.dll][Requesting imports from api-ms-win-core-crt-l2-1-0.dll][Redirecting api-ms-win-core-crt-l2-1-0.dll to kernelbase.dll][Requesting imports from ntdll.dll][Requesting imports from api-ms-win-core-libraryloader-l1-2-0.dll][Redirecting api-ms-win-core-libraryloader-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-debug-l1-1-0.dll][Redirecting api-ms-win-core-debug-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-errorhandling-l1-1-0.dll][Redirecting api-ms-win-core-errorhandling-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-handle-l1-1-0.dll][Redirecting api-ms-win-core-handle-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-l1-1-0.dll][Redirecting api-ms-win-core-heap-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll][Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-1-0.dll][Redirecting api-ms-win-core-synch-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-util-l1-1-0.dll][Redirecting api-ms-win-core-util-l1-1-0.dll to kernelbase.dll][Requesting imports from rpcrt4.dll][Loading rpcrt4.dll ...][DLL preferred base address: 0x4ef80000][Init imports for rpcrt4.dll][Requesting imports from ntdll.dll][Requesting imports from api-ms-win-core-debug-l1-1-0.dll][Redirecting api-ms-win-core-debug-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-errorhandling-l1-1-0.dll][Redirecting api-ms-win-core-errorhandling-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-errorhandling-l1-1-2.dll][Redirecting api-ms-win-core-errorhandling-l1-1-2.dll to kernelbase.dll][Requesting imports from api-ms-win-core-handle-l1-1-0.dll][Redirecting api-ms-win-core-handle-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-l1-1-0.dll][Redirecting api-ms-win-core-heap-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-interlocked-l1-1-0.dll][Redirecting api-ms-win-core-interlocked-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-io-l1-1-0.dll][Redirecting api-ms-win-core-io-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-libraryloader-l1-2-0.dll][Redirecting api-ms-win-core-libraryloader-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-localization-l1-2-0.dll][Redirecting api-ms-win-core-localization-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-registry-l1-1-0.dll][Redirecting api-ms-win-core-registry-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-memory-l1-1-0.dll][Redirecting api-ms-win-core-memory-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-string-obsolete-l1-1-0.dll][Redirecting api-ms-win-core-string-obsolete-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-obsolete-l1-1-0.dll][Redirecting api-ms-win-core-heap-obsolete-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-namedpipe-l1-1-0.dll][Redirecting api-ms-win-core-namedpipe-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processenvironment-l1-1-0.dll][Redirecting api-ms-win-core-processenvironment-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll][Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-profile-l1-1-0.dll][Redirecting api-ms-win-core-profile-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-string-l1-1-0.dll][Redirecting api-ms-win-core-string-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-1-0.dll][Redirecting api-ms-win-core-synch-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-2-0.dll][Redirecting api-ms-win-core-synch-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll][Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-timezone-l1-1-0.dll][Redirecting api-ms-win-core-timezone-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-threadpool-l1-2-0.dll][Redirecting api-ms-win-core-threadpool-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-threadpool-legacy-l1-1-0.dll][Redirecting api-ms-win-core-threadpool-legacy-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-security-base-l1-1-0.dll][Redirecting api-ms-win-security-base-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-apiquery-l1-1-0.dll][Redirecting api-ms-win-core-apiquery-l1-1-0.dll to ntdll.dll][Requesting imports from kernelbase.dll][Requesting imports from api-ms-win-core-delayload-l1-1-0.dll][Redirecting api-ms-win-core-delayload-l1-1-0.dll to kernelbase.dll][Calling rpcrt4.dll DllMain at 0x4efbbf30][0x1011c170: GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcfc8)][0x1011bc10: GetCurrentProcessId() = 0x7cc][0x101bae30: GetCurrentThreadId() = 0x1][0x1011afd0: GetTickCount() = 0x30d40][0x101d8ca0: QueryPerformanceCounter(lpPerformanceCount = 0xffffcfd0) = 0x0][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x4f02dafc, dwSpinCount = 0, Flags = 0) = 0x1][0x10124470: InitializeCriticalSectionEx(lpCriticalSection = 0x4f02db24, dwSpinCount = 0, Flags = 0) = 0x1][api RtlInitializeCriticalSectionAndSpinCount (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][0x101d693c: InitializeCriticalSection(lpCriticalSection = 0x4f02da04) = 0x1][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][api RtlImageNtHeader (ntdll) is not implemented][api RtlImageNtHeaderEx (ntdll) is not implemented][Returned from rpcrt4.dll DllMain][Done loading rpcrt4.dll][Requesting imports from api-ms-win-core-localization-l1-2-0.dll][Redirecting api-ms-win-core-localization-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-registry-l1-1-0.dll][Redirecting api-ms-win-core-registry-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-heap-l2-1-0.dll][Redirecting api-ms-win-core-heap-l2-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-security-base-l1-1-0.dll][Redirecting api-ms-win-security-base-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-string-l1-1-0.dll][Redirecting api-ms-win-core-string-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-wow64-l1-1-1.dll][Redirecting api-ms-win-core-wow64-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-core-synch-l1-2-0.dll][Redirecting api-ms-win-core-synch-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-threadpool-l1-2-0.dll][Redirecting api-ms-win-core-threadpool-l1-2-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll][Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-file-l1-1-0.dll][Redirecting api-ms-win-core-file-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-memory-l1-1-0.dll][Redirecting api-ms-win-core-memory-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-io-l1-1-0.dll][Redirecting api-ms-win-core-io-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-rtlsupport-l1-2-0.dll][Redirecting api-ms-win-core-rtlsupport-l1-2-0.dll to ntdll.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-1.dll][Redirecting api-ms-win-core-processthreads-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-eventing-provider-l1-1-0.dll][Redirecting api-ms-win-eventing-provider-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-delayload-l1-1-1.dll][Redirecting api-ms-win-core-delayload-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-core-delayload-l1-1-0.dll][Redirecting api-ms-win-core-delayload-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-apiquery-l1-1-0.dll][Redirecting api-ms-win-core-apiquery-l1-1-0.dll to ntdll.dll][Calling sechost.dll DllMain at 0x10480d20][0x1012a760: _initterm_e(pfbegin = 0x10461c3c, pfend = 0x10461c40) = 0x0][0x10128fb0: _initterm(pfbegin = 0x10461c20, pfend = 0x10461c38) = 0x0][0x10128b90: DisableThreadLibraryCalls(hLibModule = 0x10460000) = 0x1][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][api RtlInitializeCriticalSectionEx (ntdll) is not implemented][0x101d6a34: InitializeSRWLock(SRWLock = 0x104caaac)][api EventRegister (kernelbase) is not implemented][Error encountered while running sechost.dll DllMain, bailing][Done loading sechost.dll][Requesting imports from api-ms-win-service-core-l1-1-0.dll][Failed to resolve api-ms-win-service-core-l1-1-0.dll][Requesting imports from api-ms-win-service-core-l1-1-1.dll][Failed to resolve api-ms-win-service-core-l1-1-1.dll][Requesting imports from api-ms-win-service-core-l1-1-2.dll][Failed to resolve api-ms-win-service-core-l1-1-2.dll][Requesting imports from api-ms-win-service-management-l1-1-0.dll][Failed to resolve api-ms-win-service-management-l1-1-0.dll][Requesting imports from api-ms-win-service-management-l2-1-0.dll][Failed to resolve api-ms-win-service-management-l2-1-0.dll][Requesting imports from api-ms-win-service-private-l1-1-4.dll][Failed to resolve api-ms-win-service-private-l1-1-4.dll][Requesting imports from api-ms-win-service-private-l1-1-2.dll][Failed to resolve api-ms-win-service-private-l1-1-2.dll][Requesting imports from api-ms-win-service-private-l1-1-3.dll][Failed to resolve api-ms-win-service-private-l1-1-3.dll][Requesting imports from api-ms-win-service-private-l1-1-0.dll][Failed to resolve api-ms-win-service-private-l1-1-0.dll][Requesting imports from api-ms-win-service-winsvc-l1-1-0.dll][Failed to resolve api-ms-win-service-winsvc-l1-1-0.dll][Requesting imports from api-ms-win-core-namedpipe-l1-1-0.dll][Redirecting api-ms-win-core-namedpipe-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-0.dll][Redirecting api-ms-win-core-processthreads-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-processthreads-l1-1-1.dll][Redirecting api-ms-win-core-processthreads-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-security-base-l1-1-0.dll][Redirecting api-ms-win-security-base-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-security-base-private-l1-1-0.dll][Redirecting api-ms-win-security-base-private-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-registry-l1-1-0.dll][Redirecting api-ms-win-core-registry-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-registry-l1-1-1.dll][Redirecting api-ms-win-core-registry-l1-1-1.dll to kernelbase.dll][Requesting imports from api-ms-win-core-registry-l1-1-2.dll][Redirecting api-ms-win-core-registry-l1-1-2.dll to kernelbase.dll][Requesting imports from api-ms-win-core-sysinfo-l1-1-0.dll][Redirecting api-ms-win-core-sysinfo-l1-1-0.dll to kernelbase.dll][Requesting imports from kernel32.dll][Requesting imports from rpcrt4.dll][Requesting imports from api-ms-win-core-timezone-l1-1-0.dll][Redirecting api-ms-win-core-timezone-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-security-audit-l1-1-1.dll][Failed to resolve api-ms-win-security-audit-l1-1-1.dll][Requesting imports from api-ms-win-security-audit-l1-1-0.dll][Failed to resolve api-ms-win-security-audit-l1-1-0.dll][Requesting imports from api-ms-win-core-apiquery-l1-1-0.dll][Redirecting api-ms-win-core-apiquery-l1-1-0.dll to ntdll.dll][Requesting imports from api-ms-win-eventing-provider-l1-1-0.dll][Redirecting api-ms-win-eventing-provider-l1-1-0.dll to kernelbase.dll][Requesting imports from api-ms-win-core-pcw-l1-1-0.dll][Redirecting api-ms-win-core-pcw-l1-1-0.dll to kernelbase.dll][Done loading advapi32.dll][Done loading D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0x6b81f390: GetSystemTimeAsFileTime(lpSystemTimeAsFileTime = 0xffffcff0)][0x6b81df10: GetCurrentThreadId() = 0x1][0x6b822e90: GetCurrentProcessId() = 0x7cc][0x6b81df40: QueryPerformanceCounter(lpPerformanceCount = 0xffffcfe8) = 0x0][0x6b820b70: IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][Refusing to load virtual DLL api-ms-win-core-synch-l1-2-0.dll][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x446d9c, dwSpinCount = 0xfa0, Flags = 0) = 0x1][Refusing to load virtual DLL api-ms-win-core-fibers-l1-1-1.dll][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-1", hFile = 0, dwFlags = 0x800) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][0x6b821e20: FlsAlloc(lpCallback = 0x40312a) = 0x5][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x5, lpFlsData = 0x446d74) = 0x1][Refusing to load virtual DLL api-ms-win-core-synch-l1-2-0.dll][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-synch-l1-2-0", hFile = 0, dwFlags = 0x800) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "kernel32", hFile = 0, dwFlags = 0x800) = 0x6b800000][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "InitializeCriticalSectionEx") = 0x6b822ff0][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447af0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b08, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b20, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b38, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b50, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b68, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b80, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447b98, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447bb0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447bc8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447be0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447bf8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447c10, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x447c28, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b81f380: GetProcessHeap() = 0x5000000][Refusing to load virtual DLL api-ms-win-core-fibers-l1-1-0.dll][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-fibers-l1-1-0", hFile = 0, dwFlags = 0x800) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsAlloc") = 0x6b821e20][0x6b821e20: FlsAlloc(lpCallback = 0x422fb5) = 0x6][0x6b81e010: GetLastError() = 0x0][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsGetValue") = 0x6b81e770][0x6b81e770: FlsGetValue(dwFlsIndex = 0x6) = 0x0][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "FlsSetValue") = 0x6b8211e0][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0xffffffff) = 0x1][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x364) = 0x5006993][0x6b8211e0: FlsSetValue(dwFlsIndex = 0x6, lpFlsData = 0x5006993) = 0x1][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b50) = 0x0][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b50) = 0x0][0x6b81dfa0: SetLastError(dwErrCode = 0)][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b98) = 0x0][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0xe00) = 0x5006cf7][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006cf7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006d2f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006d67, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006d9f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006dd7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006e0f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006e47, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006e7f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006eb7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006eef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006f27, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006f5f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006f97, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5006fcf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007007, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500703f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007077, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50070af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50070e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500711f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007157, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500718f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50071c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50071ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007237, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500726f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50072a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50072df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007317, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500734f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007387, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50073bf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50073f7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500742f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007467, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500749f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50074d7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500750f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007547, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500757f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50075b7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50075ef, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007627, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500765f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007697, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50076cf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007707, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500773f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007777, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50077af, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50077e7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500781f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007857, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500788f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50078c7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50078ff, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007937, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x500796f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50079a7, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x50079df, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007a17, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007a4f, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007a87, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x5007abf, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][0x6b821550: GetStartupInfoW(lpStartupInfo = 0xffffcf28) = 0x0][0x6b821700: GetStdHandle(nStdHandle = 0xfffffff6) = 0xfffffff6][0x6b823390: GetFileType(hFile = 0xfffffff6) = 0x2][0x6b821700: GetStdHandle(nStdHandle = 0xfffffff5) = 0xfffffff5][0x6b823390: GetFileType(hFile = 0xfffffff5) = 0x2][0x6b821700: GetStdHandle(nStdHandle = 0xfffffff4) = 0xfffffff4][0x6b823390: GetFileType(hFile = 0xfffffff4) = 0x2][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b98) = 0x0][0x6b821ee0: GetCommandLineA() = 0x5007b13][0x6b821d70: GetCommandLineW() = 0x5007b38][0x6b81e770: FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b8203c0: GetACP() = 0x1b5][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x220) = 0x5007b80][0x6b8216a0: IsValidCodePage(CodePage = 0x1b5) = 0x1][0x6b821530: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffcd20) = 0x1][0x6b821530: GetCPInfo(CodePage = 0x1b5, lpCPInfo = 0xffffc5e4) = 0x1][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc378, cchWideChar = 0x100) = 0x100][0x6b820c40: GetStringTypeW(dwInfoType = 0x1, lpSrcStr = 0xffffc378, cchSrc = 0x100, lpCharType = 0xffffc5f8) = 0x1][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc338, cchWideChar = 0x100) = 0x100][Refusing to load virtual DLL api-ms-win-core-localization-l1-2-1.dll][0x6b81f3a0: LoadLibraryExW(lpLibFileName = "api-ms-win-core-localization-l1-2-1", hFile = 0, dwFlags = 0x800) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "LCMapStringEx") = 0x6b818840][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x100, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0简ԀĀ", cchSrc = 0x100, lpDestStr = 0xffffc128, cchDest = 0x104, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x104][0x6b81dff0: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc128, cchWideChar = 0x104, lpMultiByteStr = 0xffffcaf8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0, cchWideChar = 0) = 0x100][0x6b81df80: MultiByteToWideChar(CodePage = 0x1b5, dwFlags = 0x1, lpMultiByteStr = 0xffffcbf8, cbMultiByte = 0x100, lpWideCharStr = 0xffffc348, cchWideChar = 0x100) = 0x100][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0, cchDest = 0, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][0x6b818840: LCMapStringEx(lpLocaleName = 0, dwMapFlags = 0x200, lpSrcStr = " \x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7fÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■\xa0Ā", cchSrc = 0x100, lpDestStr = 0xffffc138, cchDest = 0x102, lpVersionInformation = 0, lpReserved = 0, sortHandle = 0) = 0x102][0x6b81dff0: WideCharToMultiByte(CodePage = 0x1b5, dwFlags = 0, lpWideCharStr = 0xffffc138, cchWideChar = 0x102, lpMultiByteStr = 0xffffc9f8, cbMultiByte = 0x100, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x100][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b68) = 0x0][0x6b898b83: EnterCriticalSection(lpCriticalSection = 0x447b20) = 0x0][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x80) = 0x5007da0][0x6b89ca4f: LeaveCriticalSection(lpCriticalSection = 0x447b20) = 0x0][0x6b820900: GetModuleFileNameW(hModule = 0, lpFilename = 0xffffcd70, nSize = 0x105) = 0x11][0x6b81f550: GetProcAddress(hModule = 0x6b800000, lpProcName = "AreFileApisANSI") = 0x6b821d80][0x6b821d80: AreFileApisANSI() = 0x1][0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0xffffcd70, cchWideChar = 0xffffffff, lpMultiByteStr = 0x447458, cbMultiByte = 0x104, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x12][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x2b) = 0x5007e20][0x6b89c134: InitializeSListHead(ListHead = 0x446d50) = 0x0][0x6b81e010: GetLastError() = 0x0][0x6b81e770: FlsGetValue(dwFlsIndex = 0x6) = 0x5006993][0x6b81dfa0: SetLastError(dwErrCode = 0)][0x6b821ef0: GetEnvironmentStringsW() = 0x5007e4b][0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0, cbMultiByte = 0, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0, dwBytes = 0x1) = 0x500190b][0x6b81dff0: WideCharToMultiByte(CodePage = 0, dwFlags = 0, lpWideCharStr = 0x5007e4b, cchWideChar = 0x1, lpMultiByteStr = 0x500190b, cbMultiByte = 0x1, lpDefaultChar = 0, lpUsedDefaultChar = 0) = 0x1][0x6b821ba0: FreeEnvironmentStringsW(penv = 0x5007e4b) = 0x1][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x4) = 0x5007e4d][0x6b81df60: HeapFree(hHeap = 0x5000000, dwFlags = 0, lpMem = 0x500190b) = True][0x6b89bd75: HeapAlloc(hHeap = 0x5000000, dwFlags = 0x8, dwBytes = 0x800) = 0x5007e51][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x4460a0, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x4460d8, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b822ff0: InitializeCriticalSectionEx(lpCriticalSection = 0x446110, dwSpinCount = 0xfa0, Flags = 0) = 0x1][0x6b820b70: IsProcessorFeaturePresent(ProcessorFeature = 0xa) = 0x1][0x6b821720: SetUnhandledExceptionFilter(lpTopLevelExceptionFilter = 0x4021bb) = 0x0][0x6b822e80: GetCurrentProcess() = 0x7cc][0x4c31ea30: OpenProcessToken(ProcessHandle = 0x7cc, DesiredAccess = 0x28, TokenHandle = 0xffffcfa0) = 0x1][api LookupPrivilegeValueW (advapi32) is not implemented][0x1010a8b0: LocalAlloc(uFlags = 0x40, uBytes = 0x1c) = 0x500865d][api NdrClientCall4 (rpcrt4) is not implemented][api NdrClientCall2 (rpcrt4) is not implemented][0x4b2f8f40: memset(dest = 0xffffc860, c = 0, count = 0xdc) = 0xffffc860][0x4b2f8f40: memset(dest = 0xffffc96c, c = 0, count = 0x94) = 0xffffc96c][api RpcBindingCreateW (rpcrt4) is not implemented][api RtlEnterCriticalSection (ntdll) is not implemented][0x101113d0: LoadLibraryExW(lpLibFileName = "rpcrt4.dll", hFile = 0, dwFlags = 0) = 0x4ef80000][0x4b2f2d10: ZwQuerySystemInformation(SystemInformationClass = 0, SystemInformation = 0xffffc6e0, SystemInformationLength = 0x2c, ReturnLength = 0) = 0x0][api RtlGetNtProductType (ntdll) is not implemented][api RtlGetCurrentServiceSessionId (ntdll) is not implemented][0x4b2f2ab0: ZwOpenKey(KeyHandle = 0xffffc694, DesiredAccess = 0x1, ObjectAttributes = 0xffffc64c) = 0x0][api ZwQueryValueKey (ntdll) is not implemented][CPU Context:][ah	: 0x0][al	: 0x17][ch	: 0x0][cl	: 0x0][dh	: 0x88][dl	: 0x10][bh	: 0x0][bl	: 0x1][ax	: 0x17][cx	: 0x0][dx	: 0x8810][bx	: 0x1][sp	: 0xc618][bp	: 0xc6c0][si	: 0x0][di	: 0xc6dc][ip	: 0x0][eax	: 0x17][ecx	: 0x0][edx	: 0x4b308810][ebx	: 0x1][esp	: 0xffffc618][ebp	: 0xffffc6c0][esi	: 0x0][edi	: 0xffffc6dc][eip	: 0x0][cr0	: 0x11][cr1	: 0x0][cr2	: 0x0][cr3	: 0x0][cr4	: 0x0][cr8	: 0x0][dr0	: 0x0][dr1	: 0x0][dr2	: 0x0][dr3	: 0x0][dr4	: 0x0][dr5	: 0x0][dr6	: 0xffff0ff0][dr7	: 0x400][st0	: 0x0][st1	: 0x0][st2	: 0x0][st3	: 0x0][st4	: 0x0][st5	: 0x0][st6	: 0x0][st7	: 0x0][eflags	: 0x46][cs	: 0x1b][ss	: 0x28][ds	: 0x28][es	: 0x28][fs	: 0x73][gs	: 0x7b][PC = 0x00000000 (unreachable)
][Memory map:][Start        End          Perm    Label                 Image][0000006000 - 000000c000   rwx     [FS]                  ][0000030000 - 0000031000   rwx     [GDT]                 ][0000400000 - 0000449000   rwx     inject.exe            D:\scriptmalsolver\rootfs\x86_windows\bin\inject.exe][0005000000 - 0005001000   rwx     [heap]                ][0005001000 - 0005002000   rwx     [heap]                ][0005002000 - 0005003000   rwx     [heap]                ][0005003000 - 0005004000   rwx     [heap]                ][0005004000 - 0005005000   rwx     [heap]                ][0005005000 - 0005006000   rwx     [heap]                ][0005006000 - 0005007000   rwx     [heap]                ][0005007000 - 0005008000   rwx     [heap]                ][0005008000 - 0005009000   rwx     [heap]                ][0006000000 - 0007400000   rwx     [GS]                  ][0010000000 - 0010218000   rwx     kernelbase.dll        D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\KERNELBASE.dll][0010220000 - 0010272000   rwx     mscoree.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\mscoree.dll][0010280000 - 00103a0000   rwx     ucrtbase.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ucrtbase.dll][00103a0000 - 001045f000   rwx     msvcrt.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\msvcrt.dll][0010460000 - 00104d6000   rwx     sechost.dll           D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\SECHOST.dll][004b280000 - 004b423000   rwx     ntdll.dll             D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ntdll.dll][004c300000 - 004c37b000   rwx     advapi32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\ADVAPI32.dll][004ef80000 - 004f03e000   rwx     rpcrt4.dll            D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\RPCRT4.dll][006b800000 - 006b8f0000   rwx     kernel32.dll          D:\scriptmalsolver\rootfs\x86_windows\Windows\System32\kernel32.dll][007ffe0000 - 007ffe1000   rwx     [kuser shared data]   ][00fffdd000 - 00ffffe000   rwx     [stack]               ]